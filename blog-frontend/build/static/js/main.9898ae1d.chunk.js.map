{"version":3,"sources":["lib/styles/palette.js","components/auth/AuthTemplate.js","modules/loading.js","lib/createRequestSaga.js","lib/api/client.js","lib/api/auth.js","modules/auth.js","components/common/Button.js","components/auth/AuthForm.js","modules/user.js","containers/auth/LoginForm.js","pages/LoginPage.js","components/common/Responsive.js","components/common/Header.js","containers/common/HeaderContainer.js","components/common/SubInfo.js","components/common/Tags.js","components/posts/PostList.js","modules/posts.js","lib/api/posts.js","containers/posts/PostListContainer.js","components/posts/Pagination.js","containers/posts/PaginatonContainer.js","pages/PostListPage.js","modules/post.js","components/post/PostViewer.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","modules/write.js","containers/post/PostViewerContainer.js","pages/PostPage.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","components/write/Editor.js","containers/write/EditorContainer.js","components/write/TagBox.js","containers/write/TagBoxContainer.js","components/write/WriteActionButtons.js","containers/write/WriteActionButtonsContainer.js","pages/WritePage.js","App.js","reportWebVitals.js","modules/index.js","index.js"],"names":["palette","gray","cyan","AuthTemplateBlock","styled","div","WhiteBox","AuthTemplate","children","className","to","START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","meta","error","client","axios","create","logout","post","authSaga","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","key","value","initializeForm","register","username","password","login","registerSaga","loginSaga","takeLatest","initialState","passwordConfirm","auth","authError","produce","draft","buttonStyle","css","props","fullWidth","StyledButton","button","StyledLink","Link","Button","AuthFormBlock","StyledInput","input","Footer","ButtonWidthMargiTop","textMap","ErrorMessage","AuthForm","onChange","onSubmit","text","autoComplete","name","placeholder","style","marginTop","logoutSaga","userSaga","TEMP_SET_USER","CHECK","CHECK_SUCCESS","CHECK_FAILURE","LOGOUT","tempSetUser","user","check","checkSaga","get","checkFailureSaga","localStorage","removeItem","e","console","log","authAPI","checkError","withRouter","history","useState","setError","dispatch","useDispatch","useSelector","useEffect","push","setItem","JSON","stringify","target","preventDefault","LoginPage","ResponsiveBlock","Responsive","rest","HeaderBlock","Wapper","Spacer","UserInfo","Header","onLogout","onClick","HeaderContainer","SubInfoBlock","hasMarginTop","SubInfo","publishedDate","Date","toLocaleDateString","TagsBlock","Tags","tags","map","tag","PostListBlock","WritePostButtonWrapper","PostItemBlock","PostItem","title","body","_id","PostList","posts","showWriteButton","postsSaga","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","page","listPostsSaga","queryString","qs","lastPage","parseInt","headers","location","match","params","parse","search","ignoreQueryPrefix","PaginationBlock","PageNumber","buildLink","query","Pagination","disabled","undefined","PostListPage","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","readPost","id","unloadPost","readPostSaga","PostViewerBlock","PostHead","PostContent","PostViewer","actionButtons","status","dangerouslySetInnerHTML","__html","Fullscreen","AskModalBlock","AskModal","visible","description","confirmText","cancelText","onConfirm","onCancel","AskRemoveModal","PostActionButtonsBlock","ActionButton","PostActionButtons","onEdit","onRemove","modal","setModal","writeSaga","INITIALIZE","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","SET_ORIGINAL_POST","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FALURE","initialize","writePost","setOriginalPost","updatePost","writePostSaga","updatePostSage","patch","postError","originalPostId","write","postId","a","delete","ownPost","PostPage","includes","RegisterPage","EditorBlock","TitleInput","QuillWrapper","Editor","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","EditorContainer","useCallback","TagBoxBlock","TagForm","Tag","TagListBlock","TagItem","React","memo","TagList","TagBox","onChangeTags","setInput","localTags","setLocalTags","insertTag","nextTags","filter","t","trim","TagBoxContainer","WriteActionButtonsBlock","WriteActionButtons","onPublish","idEdit","goBack","isEdit","WritePage","App","component","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9898ae1d.chunk.js","sourcesContent":["const palette = {\n  gray: [\n    '#f8f9fa',\n    '#f1f3f5',\n    '#e9ecef',\n    '#dee2e6',\n    '#ced4da',\n    '#adb5bd',\n    '#868e96',\n    '#495057',\n    '#343a40',\n    '#212529',\n  ],\n  cyan: [\n    '#e3fafc',\n    '#c5f6fa',\n    '#99e9f2',\n    '#66d9e8',\n    '#3bc9db',\n    '#22b8cf',\n    '#15aabf',\n    '#1098ad',\n    '#0c8599',\n    '#0b7285',\n  ],\n};\n\nexport default palette;\n","import React from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport { Link } from 'react-router-dom';\n\n/*\n 회원가입/로그인 페이지의 레이아웃을 담당하는 컴포넌트입니다.\n*/\n/** 화면 전체를 채움 */\nconst AuthTemplateBlock = styled.div`\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  background: ${palette.gray[2]};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\n/** 흰색박스 */\nconst WhiteBox = styled.div`\n  .logo-area {\n    dispaly: block;\n    padding-bottom: 2rem;\n    text-align: center;\n    font-weight: bold;\n    letter-spacing: 2px;\n  }\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\n  padding: 2rem;\n  width: 360px;\n  background: white;\n  border-radius: 2px;\n`;\n\nconst AuthTemplate = ({ children }) => {\n  return (\n    <AuthTemplateBlock>\n      <WhiteBox>\n        <div className=\"logo-area\">\n          <Link to=\"/\">BLOG</Link>\n        </div>\n        {children}\n      </WhiteBox>\n    </AuthTemplateBlock>\n  );\n};\n\nexport default AuthTemplate;\n","import { createAction, handleActions } from 'redux-actions';\n\nconst START_LOADING = 'loading/START_LOADING';\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\n\n/*\n 요청을 위한 액션 타입을 payload로 설정합니다 (예: \"sample/GET_POST\")\n*/\n\nexport const startLoading = createAction(\n  START_LOADING,\n  (requestType) => requestType,\n);\n\nexport const finishLoading = createAction(\n  FINISH_LOADING,\n  (requestType) => requestType,\n);\n\nconst initialState = {};\n\nconst loading = handleActions(\n  {\n    [START_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: true,\n    }),\n    [FINISH_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: false,\n    }),\n  },\n  initialState,\n);\n\nexport default loading;\n","import { call, put } from 'redux-saga/effects';\nimport { startLoading, finishLoading } from '../modules/loading';\n\nexport const createRequestActionTypes = (type) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n  return [type, SUCCESS, FAILURE];\n};\n\nexport default function createRequestSaga(type, request) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n\n  return function* (action) {\n    yield put(startLoading(type)); // 로딩 시작\n    try {\n      const response = yield call(request, action.payload);\n      yield put({\n        type: SUCCESS,\n        payload: response.data,\n        meta: response,\n      });\n    } catch (e) {\n      yield put({\n        type: FAILURE,\n        payload: e,\n        error: true,\n      });\n    }\n    yield put(finishLoading(type)); // 로딩 끝\n  };\n}\n","import axios from 'axios';\n\nconst client = axios.create();\n\n/*\n  글로벌 설정 예시:\n\n  // API 주소를 다른 곳으로 사용함\n  client.defaults.baseURL = 'https://external-api-server.com/'\n  // 헤더 설정\n  client.defaults.headers.common['Authorization'] = 'Bearer a1b2c3d4';\n  // 인터셉터 설정\n  axios.intercepter.response.use(\\\n    response => {\n      // 요청 성공 시 특정 작업 수행\n      return response;\n    },\n    error => {\n      // 요청 실패 시 특정 작업 수행\n      return Promise.reject(error);\n    }\n  })\n*/\n\nexport default client;\n","import client from './client';\n\n// 로그인\nexport const login = ({ username, password }) =>\n  client.post('/api/auth/login', { username, password });\n\n// 회원가입\nexport const register = ({ username, password }) =>\n  client.post('/api/auth/register', { username, password });\n\n// 로그인 상태 확인\nexport const check = () => client.get('/api/auth/check');\n\n// 로그아웃\nexport const logout = () => client.post('/api/auth/logout');\n","import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport { takeLatest } from 'redux-saga/effects';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as authAPI from '../lib/api/auth';\n\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\n\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\n  'auth/REGISTER',\n);\n\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\n  'auth/LOGIN',\n);\n\nexport const changeField = createAction(\n  CHANGE_FIELD,\n  ({ form, key, value }) => ({\n    form, // register , login\n    key, // username, password, passwordConfirm\n    value, // 실제 바꾸려는 값\n  }),\n);\nexport const initializeForm = createAction(INITIALIZE_FORM, (form) => form); // register / login\nexport const register = createAction(REGISTER, ({ username, password }) => ({\n  username,\n  password,\n}));\nexport const login = createAction(LOGIN, ({ username, password }) => ({\n  username,\n  password,\n}));\n\n// saga 생성\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\nexport function* authSaga() {\n  yield takeLatest(REGISTER, registerSaga);\n  yield takeLatest(LOGIN, loginSaga);\n}\n\nconst initialState = {\n  register: {\n    username: '',\n    password: '',\n    passwordConfirm: '',\n  },\n  login: {\n    username: '',\n    password: '',\n  },\n  auth: null,\n  authError: null,\n};\n\nconst auth = handleActions(\n  {\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\n      produce(state, (draft) => {\n        draft[form][key] = value; // 예: state.register.username을 바꾼다\n      }),\n    [INITIALIZE_FORM]: (state, { payload: form }) => ({\n      ...state,\n      [form]: initialState[form],\n      authError: null, // 폼 전환 시 회원 인증 에러 초기화\n    }),\n    // 회원가입 성공\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\n      ...state,\n      authError: null,\n      auth,\n    }),\n    // 회원가입 실패\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      authError: error,\n    }),\n    // 로그인 성공\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\n      ...state,\n      authError: null,\n      auth,\n    }),\n    // 로그인 실패\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      authError: error,\n    }),\n  },\n  initialState,\n);\n\nexport default auth;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport palette from '../../lib/styles/palette';\n\nconst buttonStyle = css`\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 0.25rem 1rem;\n  color: #fff;\n  outline: none;\n  cursor: pointer;\n  background: ${palette.gray[8]};\n  &:hover {\n    background: ${palette.gray[6]};\n  }\n  ${(props) =>\n    props.fullWidth &&\n    css`\n      padding-top: 0.75rem;\n      padding-bottom: 0.75rem;\n      width: 100%;\n      font-size: 1.125rem;\n    `}\n  ${(props) =>\n    props.cyan &&\n    css`\n      backround: ${palette.cyan[5]};\n      &:hover {\n        background: ${palette.cyan[4]};\n      }\n    `}\n    &:disabled {\n    background: ${palette.gray[3]};\n    color: ${palette.gray[5]};\n  }\n`;\n\nconst StyledButton = styled.button`\n  ${buttonStyle}\n`;\n\nconst StyledLink = styled(Link)`\n  ${buttonStyle}\n`;\n\nconst Button = (props) => {\n  return props.to ? (\n    <StyledLink {...props} cyan={props.cyan ? 1 : 0} />\n  ) : (\n    <StyledButton {...props} />\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport palette from '../../lib/styles/palette';\nimport Button from '../common/Button';\n\n/*\n 회원 가입 또는 로그인 폼을 보여 줍니다.\n*/\n\nconst AuthFormBlock = styled.div`\n  h3 {\n    marign: 0;\n    color: ${palette.gray[8]};\n    margin-bottom: 1rem;\n  }\n`;\n\n/**\n * 스타일링된 input\n */\nconst StyledInput = styled.input`\n  font-size: 1rem;\n  border: none;\n  border-bottom: 1px solid ${palette.gray[5]};\n  padding-bottom: 0.5rem;\n  outline: none;\n  width: 100%;\n  &:focus {\n    color: $oc-teal07;\n    border-bottom: 1px solid ${palette.gray[7]};\n  }\n  & + & {\n    margin-top: 1rem;\n  }\n`;\n\n/**\n * 폼 하단에 로그인 혹은 회원가입 링크를 보여 줌\n */\nconst Footer = styled.div`\n  margin-top: 2rem;\n  text-align: right;\n  a {\n    color: ${palette.gray[6]};\n    text-decoration: underline;\n    &:hover {\n      color: ${palette.gray[9]};\n    }\n  }\n`;\n\nconst ButtonWidthMargiTop = styled(Button)`\n  margin-top: 1rem;\n`;\n\nconst textMap = {\n  login: '로그인',\n  register: '회원가입',\n};\n/* 에러를 보여줍니다. */\nconst ErrorMessage = styled.div`\n  color: red;\n  text-align: center;\n  font-size: 0.875rem;\n  margin-top: 1rem;\n`;\n\nconst AuthForm = ({ type, form, onChange, onSubmit, error }) => {\n  const text = textMap[type];\n  return (\n    <AuthFormBlock>\n      <h3>{text}</h3>\n      <form onSubmit={onSubmit}>\n        <StyledInput\n          autoComplete=\"username\"\n          name=\"username\"\n          placeholder=\"아이디\"\n          onChange={onChange}\n          value={form.username}\n        />\n        <StyledInput\n          autoComplete=\"new-password\"\n          name=\"password\"\n          placeholder=\"비밀번호\"\n          type=\"password\"\n          onChange={onChange}\n          value={form.password}\n        />\n        {type === 'register' && (\n          <StyledInput\n            autoComplete=\"new-password\"\n            name=\"passwordConfirm\"\n            placeholder=\"비밀번호 확인\"\n            type=\"password\"\n            onChange={onChange}\n            value={form.passwordConfirm}\n          />\n        )}\n        {error && <ErrorMessage>{error}</ErrorMessage>}\n        <ButtonWidthMargiTop cyan fullWidth style={{ marginTop: '1rem' }}>\n          {text}\n        </ButtonWidthMargiTop>\n      </form>\n      <Footer>\n        {type === 'login' ? (\n          <Link to=\"/register\">회원가입</Link>\n        ) : (\n          <Link to=\"/login\">로그인</Link>\n        )}\n      </Footer>\n    </AuthFormBlock>\n  );\n};\n\nexport default AuthForm;\n","import { createAction, handleActions } from 'redux-actions';\nimport { takeLatest, call } from 'redux-saga/effects';\nimport * as authAPI from '../lib/api/auth';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\n\nconst TEMP_SET_USER = 'user/TEMP_SET_USER'; // 새로고침 이후 임시 로그인 처리\n// 회원 정보 확인\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\n  'user/CHECK',\n);\nconst LOGOUT = 'user/LOGOUT';\n\nexport const tempSetUser = createAction(TEMP_SET_USER, (user) => user);\nexport const check = createAction(CHECK);\nexport const logout = createAction(LOGOUT);\n\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\n\nfunction checkFailureSaga() {\n  try {\n    localStorage.removeItem('user'); // localStorage 에서 user 제거하고\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\n\nfunction* logoutSaga() {\n  try {\n    yield call(authAPI.logout); // logout API 호출\n    localStorage.removeItem('user'); // localStorage 에서 user 제거\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* userSaga() {\n  yield takeLatest(CHECK, checkSaga);\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\n  yield takeLatest(LOGOUT, logoutSaga);\n}\n\nconst initialState = {\n  user: null,\n  checkError: null,\n};\n\nexport default handleActions(\n  {\n    [TEMP_SET_USER]: (state, { payload: user }) => ({\n      ...state,\n      user,\n    }),\n    [CHECK_SUCCESS]: (state, { payload: user }) => ({\n      ...state,\n      user,\n      checkError: null,\n    }),\n    [CHECK_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      user: null,\n      checkError: error,\n    }),\n    [LOGOUT]: (state) => ({\n      ...state,\n      user: null,\n    }),\n  },\n  initialState,\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { changeField, initializeForm, login } from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/user';\n\nconst LoginForm = ({ history }) => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\n    form: auth.login,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user,\n  }));\n\n  // 인풋 변경 핸들러\n  const onChange = (e) => {\n    const { value, name } = e.target;\n    dispatch(\n      changeField({\n        form: 'login',\n        key: name,\n        value,\n      }),\n    );\n  };\n\n  // 폼 등록 이벤트 핸들러\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const { username, password } = form;\n    dispatch(login({ username, password }));\n  };\n\n  // 컴포넌트가 처음 렌덩링될 때 form 초기화함\n  useEffect(() => {\n    dispatch(initializeForm('login'));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (authError) {\n      console.log('오류 발생');\n      console.log(authError);\n      setError('로그인 실패');\n      return;\n    }\n    if (auth) {\n      console.log('로그인 성공');\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]);\n\n  useEffect(() => {\n    if (user) {\n      history.push('/');\n      try {\n        localStorage.setItem('user', JSON.stringify(user));\n      } catch (e) {\n        console.log('localStorage is not working');\n      }\n    }\n  }, [history, user]);\n\n  return (\n    <AuthForm\n      type=\"login\"\n      form={form}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      error={error}\n    ></AuthForm>\n  );\n};\n\nexport default withRouter(LoginForm);\n","import React from 'react';\nimport AuthTemplate from '../components/auth/AuthTemplate';\nimport LoginForm from '../containers/auth/LoginForm';\n\nconst LoginPage = () => {\n  return (\n    <AuthTemplate>\n      <LoginForm />\n    </AuthTemplate>\n  );\n};\n\nexport default LoginPage;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst ResponsiveBlock = styled.div`\n  padding-left: 1rem;\n  padding-right: 1rem;\n  width: 1024px;\n  margin: 0 auto;\n\n  @media (max-width: 1024px) {\n    width: 768px;\n  }\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst Responsive = ({ children, ...rest }) => {\n  return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>;\n};\n\nexport default Responsive;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Responsive from './Responsive';\nimport Button from './Button';\nimport { Link } from 'react-router-dom';\n\nconst HeaderBlock = styled.div`\n  position: fixed;\n  width: 100%;\n  background: #fff;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\n`;\n\nconst Wapper = styled(Responsive)`\n  height: 4rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  .logo {\n    font-size: 1.125rem;\n    font-weight: 800;\n    letter-spacing: 2px;\n  }\n  .right {\n    display: flex;\n    align-items: center;\n  }\n`;\nconst Spacer = styled.div`\n  height: 4rem;\n`;\n\nconst UserInfo = styled.div`\n  font-weight: 800;\n  margin-right: 1rem;\n`;\n\nconst Header = ({ user, onLogout }) => {\n  return (\n    <>\n      <HeaderBlock>\n        <Wapper>\n          <Link to=\"/\" className=\"logo\">\n            BLOG\n          </Link>\n          {user ? (\n            <div className=\"right\">\n              <UserInfo>{user.username}</UserInfo>\n              <Button onClick={onLogout}>로그아웃</Button>\n            </div>\n          ) : (\n            <div className=\"right\">\n              <Button to=\"/login\">로그인</Button>\n            </div>\n          )}\n        </Wapper>\n      </HeaderBlock>\n      <Spacer />\n    </>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Header from '../../components/common/Header';\nimport { logout } from '../../modules/user';\n\nconst HeaderContainer = () => {\n  const { user } = useSelector(({ user }) => ({ user: user.user }));\n  const dispatch = useDispatch();\n  const onLogout = () => {\n    dispatch(logout());\n  };\n  return <Header user={user} onLogout={onLogout} />;\n};\n\nexport default HeaderContainer;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport palette from '../../lib/styles/palette';\n\nconst SubInfoBlock = styled.div`\n  ${(props) =>\n    props.hasMarginTop &&\n    css`\n      margin-top: 1rem;\n    `}\n  color: ${palette.gray[6]};\n  /* span 사이에 가운뎃점 문자 보여주기*/\n  span + span:before {\n    color: ${palette.gray[4]};\n    padding-left: 0.25rem;\n    padding-right: 0.25rem;\n    content: '\\\\B7'; /* 가운뎃점 문자 */\n  }\n`;\n\nconst SubInfo = ({ username, publishedDate, hasMarginTop }) => {\n  return (\n    <SubInfoBlock hasMarginTop={hasMarginTop}>\n      <span>\n        <b>\n          <Link to={`/@${username}`}>{username}</Link>\n        </b>\n      </span>\n      <span>{new Date(publishedDate).toLocaleDateString()}</span>\n    </SubInfoBlock>\n  );\n};\n\nexport default SubInfo;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport palette from '../../lib/styles/palette';\n\nconst TagsBlock = styled.div`\n  margin-top: 0.5rem;\n  .tag {\n    dispaly: inline-block;\n    color: ${palette.cyan[7]};\n    text-decoration: none;\n    margin-right: 0.5rem;\n    &:hover {\n      color: ${palette.cyan[6]};\n    }\n  }\n`;\n\nconst Tags = ({ tags }) => {\n  return (\n    <TagsBlock>\n      {tags.map((tag) => (\n        <Link className=\"tag\" to={`/?tag=${tag}`} key={tag}>\n          #{tag}\n        </Link>\n      ))}\n    </TagsBlock>\n  );\n};\n\nexport default Tags;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Responsive from '../common/Responsive';\nimport palette from '../../lib/styles/palette';\nimport Button from '../common/Button';\nimport SubInfo from '../common/SubInfo';\nimport Tags from '../common/Tags';\nimport { Link } from 'react-router-dom';\n\nconst PostListBlock = styled(Responsive)`\n  margin-top: 3rem;\n`;\nconst WritePostButtonWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 3rem;\n`;\nconst PostItemBlock = styled.div`\n  padding-top: 3rem;\n  padding-bottom: 3rem;\n\n  &:first-child {\n    padding-top: 0;\n  }\n  & + & {\n    border-top: 1px solid ${palette.gray[2]};\n  }\n  h2 {\n    font-size: 2rem;\n    margin-bottom: 0;\n    margin-top: 0;\n\n    &:hover {\n      color: ${palette.gray[6]};\n    }\n  }\n  p {\n    margin-top: 2rem;\n  }\n`;\n\nconst PostItem = ({ post }) => {\n  const { publishedDate, user, tags, title, body, _id } = post;\n  return (\n    <PostItemBlock>\n      <h2>\n        <Link to={`/@${user.username}/${_id}`}>{title}</Link>\n      </h2>\n      <SubInfo\n        username={user.username}\n        publishedDate={new Date(publishedDate)}\n      />\n      <Tags tags={tags} />\n      <p>{body}</p>\n    </PostItemBlock>\n  );\n};\n\nconst PostList = ({ posts, error, showWriteButton, loading }) => {\n  if (error) {\n    return <PostListBlock>Error Page</PostListBlock>;\n  }\n  return (\n    <PostListBlock>\n      <WritePostButtonWrapper>\n        {showWriteButton && (\n          <Button cyan to=\"/write\">\n            New Post\n          </Button>\n        )}\n      </WritePostButtonWrapper>\n      {/*  로딩 중 아니고, 포스트 배열이 존재할 때만 보여줌 */}\n      {!loading && posts && (\n        <div>\n          {posts.map((post) => (\n            <PostItem post={post} key={post._id}></PostItem>\n          ))}\n        </div>\n      )}\n    </PostListBlock>\n  );\n};\nexport default PostList;\n","import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst [\n  LIST_POSTS,\n  LIST_POSTS_SUCCESS,\n  LIST_POSTS_FAILURE,\n] = createRequestActionTypes('posts/LIST_POSTS');\n\nexport const listPosts = createAction(\n  LIST_POSTS,\n  ({ tag, username, page }) => ({ tag, username, page }),\n);\n\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\nexport function* postsSaga() {\n  yield takeLatest(LIST_POSTS, listPostsSaga);\n}\n\nconst initialState = {\n  posts: null,\n  error: null,\n  lastPage: 1,\n};\n\nconst posts = handleActions(\n  {\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts, meta: response }) => ({\n      ...state,\n      posts,\n      lastPage: parseInt(response.headers['last-page'], 10), // 문자열을 숫자로 변환\n    }),\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n  },\n  initialState,\n);\n\nexport default posts;\n","import qs from 'qs';\nimport client from './client';\n\nexport const writePost = ({ title, body, tags }) =>\n  client.post('/api/posts', { title, body, tags });\n\nexport const readPost = (id) => client.get(`/api/posts/${id}`);\n\nexport const listPosts = ({ page, username, tag }) => {\n  const queryString = qs.stringify({\n    page,\n    username,\n    tag,\n  });\n\n  return client.get(`/api/posts?${queryString}`);\n};\n\nexport const updatePost = ({ id, title, body, tags }) =>\n  client.patch(`api/posts/${id}`, {\n    title,\n    body,\n    tags,\n  });\n\nexport const removePost = (id) => client.delete(`/api/posts/${id}`);\n","import React, { useEffect } from 'react';\nimport qs from 'qs';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostList from '../../components/posts/PostList';\nimport { listPosts } from '../../modules/posts';\n\nconst PostListContainer = ({ location, match }) => {\n  const dispatch = useDispatch();\n  const { posts, error, loading, user } = useSelector(\n    ({ posts, loading, user }) => ({\n      posts: posts.posts,\n      error: posts.error,\n      loading: loading['posts/LIST_POSTS'],\n      user: user.user,\n    }),\n  );\n  useEffect(() => {\n    const { username } = match.params;\n    const { tag, page } = qs.parse(location.search, {\n      ignoreQueryPrefix: true,\n    });\n    dispatch(listPosts({ tag, username, page }));\n  }, [dispatch, location.search, match.params]);\n  return (\n    <PostList\n      loading={loading}\n      error={error}\n      posts={posts}\n      showWriteButton={user}\n    />\n  );\n};\n\nexport default withRouter(PostListContainer);\n","import React from 'react';\nimport styled from 'styled-components';\nimport qs from 'qs';\nimport Button from '../common/Button';\n\nconst PaginationBlock = styled.div`\n  width: 320px;\n  margin: 0 auto;\n  display: flex;\n  justify-content: space-between;\n  margin-bottm: 3rem;\n`;\n\nconst PageNumber = styled.div``;\n\nconst buildLink = ({ username, tag, page }) => {\n  const query = qs.stringify({ tag, page });\n  return username ? `/@${username}?${query}` : `/?${query}`;\n};\n\nconst Pagination = ({ page, lastPage, username, tag }) => {\n  return (\n    <PaginationBlock>\n      <Button\n        disabled={page === 1}\n        to={\n          page === 1 ? undefined : buildLink({ username, tag, page: page - 1 })\n        }\n      >\n        이전\n      </Button>\n      <PageNumber>{page}</PageNumber>\n      <Button\n        disabled={page === lastPage}\n        to={\n          page === lastPage\n            ? undefined\n            : buildLink({ username, tag, page: page + 1 })\n        }\n      >\n        다음\n      </Button>\n    </PaginationBlock>\n  );\n};\n\nexport default Pagination;\n","import React from 'react';\nimport Pagination from '../../components/posts/Pagination';\nimport { useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport qs from 'qs';\n\nconst PaginationContainer = ({ location, match }) => {\n  const { lastPage, posts, loading } = useSelector(({ posts, loading }) => ({\n    lastPage: posts.lastPage,\n    posts: posts.posts,\n    loading: loading['posts/LIST_POSTS'],\n  }));\n\n  // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여 주지 않음\n  if (!posts || loading) return null;\n\n  const { username } = match.params;\n\n  // page가 없으면 1을 기본값으로 사용\n  const { tag, page = 1 } = qs.parse(location.search, {\n    ignoreQueryPrefix: true,\n  });\n\n  return (\n    <Pagination\n      tag={tag}\n      username={username}\n      page={parseInt(page, 10)}\n      lastPage={lastPage}\n    />\n  );\n};\n\nexport default withRouter(PaginationContainer);\n","import React from 'react';\nimport HeaderContainer from '../containers/common/HeaderContainer';\nimport PostListContainer from '../containers/posts/PostListContainer';\nimport PaginationContaeinr from '../containers/posts/PaginatonContainer';\n\nconst PostListPage = () => {\n  return (\n    <>\n      <HeaderContainer />\n      <PostListContainer />\n      <PaginationContaeinr />\n    </>\n  );\n};\n\nexport default PostListPage;\n","import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst [\n  READ_POST,\n  READ_POST_SUCCESS,\n  READ_POST_FAILURE,\n] = createRequestActionTypes('post/READ_POST');\nconst UNLOAD_POST = 'post/UNLOAD_POST';\n//포스트페이지에서 벗어날 떼 데이터 비우기\n\nexport const readPost = createAction(READ_POST, (id) => id);\nexport const unloadPost = createAction(UNLOAD_POST);\n\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\nexport function* postSaga() {\n  yield takeLatest(READ_POST, readPostSaga);\n}\n\nconst initialState = {\n  post: null,\n  error: null,\n};\n\nconst post = handleActions(\n  {\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [UNLOAD_POST]: () => initialState,\n  },\n  initialState,\n);\n\nexport default post;\n","import React from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport Responsive from '../common/Responsive';\nimport SubInfo from '../common/SubInfo';\nimport Tags from '../common/Tags';\nimport { Helmet } from 'react-helmet-async';\n\nconst PostViewerBlock = styled(Responsive)`\n  margin-top: 4rem;\n`;\n\nconst PostHead = styled.div`\n  border-bottom: 1px solid ${palette.gray[2]};\n  padding-bottom: 3rem;\n  margin-bottom: 3rem;\n  h1 {\n    font-size: 3rem;\n    line-height: 1.5;\n    margin: 0;\n  }\n`;\n\nconst PostContent = styled.div`\n  font-size: 1.3125rem;\n  color: ${palette.gray[8]};\n`;\n\nconst PostViewer = ({ post, error, loading, actionButtons }) => {\n  // 에러 발생 시\n  if (error) {\n    if (error.response && error.response.status === 404) {\n      return <PostViewerBlock>존재하지 않는 포스트입니다.</PostViewerBlock>;\n    }\n    return <PostViewerBlock>오류 발생!</PostViewerBlock>;\n  }\n\n  // 로딩 중이거나 아직 포스트 데이터가 없을 때\n  if (loading || !post) {\n    return null;\n  }\n\n  const { title, body, user, publishedDate, tags } = post;\n  return (\n    <PostViewerBlock>\n      <Helmet>\n        <title>{title} - BLOG</title>\n      </Helmet>\n      <PostHead>\n        <h1>{title}</h1>\n        <SubInfo\n          username={user.username}\n          publishedDate={publishedDate}\n          hasMarginTop\n        />\n        <Tags tags={tags} />\n      </PostHead>\n      {actionButtons}\n\n      <PostContent dangerouslySetInnerHTML={{ __html: body }} />\n    </PostViewerBlock>\n  );\n};\n\nexport default PostViewer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './Button';\n\nconst Fullscreen = styled.div`\n  position: fixed;\n  z-index: 30;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.25);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst AskModalBlock = styled.div`\n  width: 320px;\n  background: #fff;\n  padding: 1.5rem;\n  border-raduis: 4px;\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\n  h2 {\n    margin-top: 0;\n    margin-bottom: 1rem;\n  }\n  p {\n    margin-bottom: 3rem;\n  }\n  .buttons {\n    dispaly: flex;\n    justify-content: flex-end;\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  height: 2rem;\n  & + & {\n    margin-left: 0.75rem;\n  }\n`;\n\nconst AskModal = ({\n  visible,\n  title,\n  description,\n  confirmText = '확인',\n  cancelText = '취소',\n  onConfirm,\n  onCancel,\n}) => {\n  if (!visible) return null;\n  return (\n    <Fullscreen>\n      <AskModalBlock>\n        <h2>{title}</h2>\n        <p>{description}</p>\n        <div className=\"buttons\">\n          <StyledButton onClick={onCancel}>{cancelText}</StyledButton>\n          <StyledButton cyan onClick={onConfirm}>\n            {confirmText}\n          </StyledButton>\n        </div>\n      </AskModalBlock>\n    </Fullscreen>\n  );\n};\n\nexport default AskModal;\n","import React from 'react';\nimport AskModal from '../common/AskModal';\n\nconst AskRemoveModal = ({ visible, onConfirm, onCancel }) => {\n  return (\n    <AskModal\n      visible={visible}\n      title=\"포스트 삭제\"\n      description=\"포스트를 정말 삭제하시겠습니까?\"\n      confirmText=\"삭제\"\n      onConfirm={onConfirm}\n      onCancel={onCancel}\n    />\n  );\n};\n\nexport default AskRemoveModal;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport AskRemoveModal from './AskRemoveModal';\n\nconst PostActionButtonsBlock = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 2rem;\n  margin-top: -1.5rem;\n`;\n\nconst ActionButton = styled.div`\n  padding: 0.25rem 0.5rem;\n  border-radius: 4px;\n  color: ${palette.gray[6]};\n  font-weight: bold;\n  border: none;\n  outline: none;\n  font-size: 0.875rem;\n  cursor: pointer;\n  &:hover {\n    background: ${palette.gray[1]};\n    color: ${palette.cyan[7]};\n    & + & {\n      margin-left: 0.25rem;\n    }\n  }\n`;\n\nconst PostActionButtons = ({ onEdit, onRemove }) => {\n  const [modal, setModal] = useState(false);\n  const onRemoveClick = () => {\n    setModal(true);\n  };\n  const onCancel = () => {\n    setModal(false);\n  };\n  const onConfirm = () => {\n    setModal(false);\n    onRemove();\n  };\n\n  return (\n    <>\n      <PostActionButtonsBlock>\n        <ActionButton onClick={onEdit}>수정</ActionButton>\n        <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\n      </PostActionButtonsBlock>\n      <AskRemoveModal\n        visible={modal}\n        onConfirm={onConfirm}\n        onCancel={onCancel}\n      />\n    </>\n  );\n};\n\nexport default PostActionButtons;\n","import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\nconst [\n  WRITE_POST,\n  WRITE_POST_SUCCESS,\n  WRITE_POST_FAILURE,\n] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST'; // 수정 버튼 클릭 시 글쓰기 페이지로 이동\nconst [\n  UPDATE_POST,\n  UPDATE_POST_SUCCESS,\n  UPDATE_POST_FALURE,\n] = createRequestActionTypes('write/UPDATE_POST'); // 포스트 수정\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\n\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\n  title,\n  body,\n  tags,\n}));\n\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, (post) => post);\n\nexport const updatePost = createAction(\n  UPDATE_POST,\n  ({ id, title, body, tags }) => ({ id, title, body, tags }),\n);\n\n// 사가 생성\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nconst updatePostSage = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\n\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSage);\n}\n\nconst initialState = {\n  title: '',\n  body: '',\n  tags: [],\n  post: null,\n  postError: null,\n  originalPostId: null,\n};\n\nconst write = handleActions(\n  {\n    [INITIALIZE]: (state) => initialState, // initialState를 넣으면 초기 상태로 바뀜\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value, // 특정 key 값을 업데이트\n    }),\n    [WRITE_POST]: (state) => ({\n      ...state,\n      // post와 postError을 초기화\n      post: null,\n      postError: null,\n    }),\n    // 포스트 작성 성공\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    // 포스트 작성 실패\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n    [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\n      ...state,\n      title: post.title,\n      body: post.body,\n      tags: post.tags,\n      originalPostId: post._id,\n    }),\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    [UPDATE_POST_FALURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n  },\n  initialState,\n);\n\nexport default write;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { readPost, unloadPost } from '../../modules/post';\nimport PostViewer from '../../components/post/PostViewer';\nimport PostActionButtons from '../../components/post/PostActionButtons';\nimport { setOriginalPost } from '../../modules/write';\nimport { removePost } from '../../lib/api/posts';\n\nconst PostViewerContainer = ({ match, history }) => {\n  // 처음 마운트될 때 포스트 읽기 API 요청\n  const { postId } = match.params;\n  const dispatch = useDispatch();\n  const { post, error, loading, user } = useSelector(\n    ({ post, loading, user }) => ({\n      post: post.post,\n      error: post.error,\n      loading: loading['post/READ_POST'],\n      user: user.user,\n    }),\n  );\n\n  useEffect(() => {\n    dispatch(readPost(postId));\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\n    return () => {\n      dispatch(unloadPost());\n    };\n  }, [dispatch, postId]);\n\n  const onEdit = () => {\n    dispatch(setOriginalPost(post));\n    history.push('/write');\n  };\n\n  const onRemove = async () => {\n    try {\n      await removePost(postId);\n      history.push('/'); // 홈으로 이동\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const ownPost = (user && user._id) === (post && post.user._id);\n\n  return (\n    <PostViewer\n      post={post}\n      loading={loading}\n      error={error}\n      actionButtons={\n        ownPost && <PostActionButtons onEdit={onEdit} onRemove={onRemove} />\n      }\n    />\n  );\n};\n\nexport default withRouter(PostViewerContainer);\n","import React from 'react';\nimport HeaderContainer from '../containers/common/HeaderContainer';\nimport PostViewerContainer from '../containers/post/PostViewerContainer';\n\nconst PostPage = () => {\n  return (\n    <>\n      <HeaderContainer />\n      <PostViewerContainer />\n    </>\n  );\n};\n\nexport default PostPage;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeField, initializeForm, register } from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/user';\nimport { withRouter } from 'react-router-dom';\n\nconst RegisterForm = ({ history }) => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\n    form: auth.register,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user,\n  }));\n\n  // 인풋 변경 핸들러\n  const onChange = (e) => {\n    const { value, name } = e.target;\n    dispatch(\n      changeField({\n        form: 'register',\n        key: name,\n        value,\n      }),\n    );\n  };\n\n  // 폼 등록 이벤트 핸들러\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const { username, password, passwordConfirm } = form;\n    // 하나라도 비어 있다면\n    if ([username, password, passwordConfirm].includes('')) {\n      setError('빈 칸을 모두 입력하세요.');\n      return;\n    }\n    // 비밀번호가 일치하지 않는다면\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      dispatch(changeField({ form: 'register', key: 'password', value: '' }));\n      dispatch(\n        changeField({ form: 'register', key: 'passwordConfirm', value: '' }),\n      );\n      return;\n    }\n    dispatch(register({ username, password }));\n  };\n\n  // 컴포넌트가 처음 렌덩링될 때 form 초기화함\n  useEffect(() => {\n    dispatch(initializeForm('register'));\n  }, [dispatch]);\n\n  // 회원가입 성공/실패 처리\n  useEffect(() => {\n    if (authError) {\n      // 계정명이 이미 존재할 때\n      if (authError.response.status === 409) {\n        setError('이미 존재하는 계정명입니다.');\n        return;\n      }\n      // 기타이유\n      setError('회원가입 실패');\n      return;\n    }\n    if (auth) {\n      console.log('회원가입 성공');\n      console.log(auth);\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]);\n\n  // user 값이 잘 설정되었는지 확인\n  useEffect(() => {\n    if (user) {\n      history.push('/'); // 홈 화면으로 이동\n      try {\n        localStorage.setItem('user', JSON.stringify(user));\n      } catch (e) {\n        console.log('localStorage is not working');\n      }\n    }\n  }, [history, user]);\n\n  return (\n    <AuthForm\n      type=\"register\"\n      form={form}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      error={error}\n    ></AuthForm>\n  );\n};\n\nexport default withRouter(RegisterForm);\n","import React from 'react';\nimport AuthTemplate from '../components/auth/AuthTemplate';\nimport RegisterForm from '../containers/auth/RegisterForm';\n\nconst RegisterPage = () => {\n  return (\n    <AuthTemplate>\n      <RegisterForm />\n    </AuthTemplate>\n  );\n};\n\nexport default RegisterPage;\n","import React, { useRef, useEffect } from 'react';\nimport Quill from 'quill';\nimport 'quill/dist/quill.bubble.css';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport Responsive from '../common/Responsive';\n\nconst EditorBlock = styled(Responsive)`\n  padding-top: 5rem;\n  padding-bottom: 5rem;\n`;\nconst TitleInput = styled.input`\n  font-size: 3rem;\n  outline: none;\n  padding-bottom: 0.5rem;\n  border: none;\n  border-bottom: 1px solid ${palette.gray[4]};\n  margin-bottom: 2rem;\n  width: 100%;\n`;\nconst QuillWrapper = styled.div`\n  .ql-editor {\n    padding: 0;\n    min-height: 320px;\n    font-size: 1.125rem;\n    line-height: 1.5;\n  }\n  .ql-editor.ql-blank::before {\n    left: 0px;\n  }\n`;\nconst Editor = ({ title, body, onChangeField }) => {\n  const quillElement = useRef(null); // Quill을 적용할 DivElement를 설정\n  const quillInstance = useRef(null); // Quill 인스턴스를 설정\n\n  useEffect(() => {\n    quillInstance.current = new Quill(quillElement.current, {\n      theme: 'bubble',\n      placeholder: '내용을 작성하세요...',\n      modules: {\n        // 더 많은 옵션\n        // https://quilljs.com/docs/modules/toolbar/ 참고\n        toolbar: [\n          [{ header: '1' }, { header: '2' }],\n          ['bold', 'italic', 'underline', 'strike'],\n          [{ list: 'ordered' }, { list: 'bullet' }],\n          ['blockquote', 'code-block', 'link', 'image'],\n        ],\n      },\n    });\n\n    // quill에 text-change 이벤트 핸들러 등록\n    // 참고: https://quilljs.com/docs/api/#events\n    const quill = quillInstance.current;\n    quill.on('text-change', (delta, oldDelta, source) => {\n      if (source === 'user') {\n        onChangeField({ key: 'body', value: quill.root.innerHTML });\n      }\n    });\n  }, [onChangeField]);\n\n  const mounted = useRef(false);\n  useEffect(() => {\n    if (mounted.current) return;\n    mounted.current = true;\n    quillInstance.current.root.innerHTML = body;\n  }, [body]);\n\n  const onChangeTitle = (e) => {\n    onChangeField({ key: 'title', value: e.target.value });\n  };\n\n  return (\n    <EditorBlock>\n      <TitleInput\n        placeholder=\"제목을 입력하세요.\"\n        onChange={onChangeTitle}\n        value={title}\n      />\n      <QuillWrapper>\n        <div ref={quillElement} />\n      </QuillWrapper>\n    </EditorBlock>\n  );\n};\n\nexport default Editor;\n","import React, { useEffect, useCallback } from 'react';\nimport Editor from '../../components/write/Editor';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeField, initialize } from '../../modules/write';\n\nconst EditorContainer = () => {\n  const dispatch = useDispatch();\n\n  const { title, body } = useSelector(({ write }) => ({\n    title: write.title,\n    body: write.body,\n  }));\n\n  const onChangeField = useCallback(\n    (payload) => dispatch(changeField(payload)),\n    [dispatch],\n  );\n\n  // 언마운트될 때 초기화\n  useEffect(() => {\n    return () => {\n      dispatch(initialize());\n    };\n  }, [dispatch]);\n\n  return <Editor onChangeField={onChangeField} title={title} body={body} />;\n};\n\nexport default EditorContainer;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\n\nconst TagBoxBlock = styled.div`\n  width: 100%;\n  border-top: 1px solid ${palette.gray[2]};\n  padding-top: 2rem;\n h4 {\n    color: ${palette.gray[8]}\n    margin-top: 0;\n    margin-bottom: 0.5rem;\n  }\n`;\n\nconst TagForm = styled.form`\n  border-radius: 4px;\n  overflow: hidden;\n  display: flex;\n  width: 256px;\n  border: 1px solid ${palette.gray[9]}; /* 스타일 초기화 */\n  input,\n  button {\n    outline: none;\n    border: none;\n    font-size: 1rem;\n  }\n  input {\n    padding: 0.5rem;\n    flex: 1;\n  }\n  button {\n    cursor: pointer;\n    padding-right: 1rem;\n    padding-left: 1rem;\n    border: none;\n    background: ${palette.gray[8]};\n    color: white;\n    font-weight: bold;\n    &:hover {\n      background: ${palette.gray[6]};\n    }\n  }\n`;\n\nconst Tag = styled.div`\n  margin-right: 0.5rem;\n  color: ${palette.gray[6]};\n  cursor: pointer;\n  &:hover {\n    opacity: 0.5;\n  }\n`;\n\nconst TagListBlock = styled.div`\n  display: flex;\n  margin-top: 0.5rem;\n`;\n\n// React.memo를 사용하여 tag 값이 바뀔 때만 리렌더링되도록 처리\nconst TagItem = React.memo(({ tag, onRemove }) => (\n  <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\n));\n\n// React.memo를 사용하여 tags 값이 바뀔 때만 리렌더링되도록 처리\nconst TagList = React.memo(({ tags, onRemove }) => (\n  <TagListBlock>\n    {tags.map((tag) => (\n      <TagItem key={tag} tag={tag} onRemove={onRemove} />\n    ))}\n  </TagListBlock>\n));\n\nconst TagBox = ({ tags, onChangeTags }) => {\n  const [input, setInput] = useState('');\n  const [localTags, setLocalTags] = useState([]);\n  const insertTag = useCallback(\n    (tag) => {\n      if (!tag) return; // 공백이라면 추가하지 않음\n      if (localTags.includes(tag)) return; // 이미 존재한다면 추가하지 않음\n      const nextTags = [...localTags, tag];\n      setLocalTags(nextTags);\n      onChangeTags(nextTags);\n    },\n    [localTags, onChangeTags],\n  );\n\n  const onRemove = useCallback(\n    (tag) => {\n      const nextTags = localTags.filter((t) => t !== tag);\n      setLocalTags(nextTags);\n      onChangeTags(nextTags);\n    },\n    [localTags, onChangeTags],\n  );\n\n  const onChange = useCallback((e) => {\n    setInput(e.target.value);\n  }, []);\n\n  const onSubmit = useCallback(\n    (e) => {\n      e.preventDefault();\n      insertTag(input.trim()); // 앞뒤 공백을 없앤 후 등록\n      setInput(''); // input 초기화\n    },\n    [input, insertTag],\n  );\n\n  // tags 값이 바뀔 때\n  useEffect(() => {\n    setLocalTags(tags);\n  }, [tags]);\n\n  return (\n    <TagBoxBlock>\n      <h4>태그</h4>\n      <TagForm onSubmit={onSubmit}>\n        <input\n          placeholder=\"태그를 입력하세요\"\n          value={input}\n          onChange={onChange}\n        />\n        <button type=\"submit\">추가</button>\n      </TagForm>\n      <TagList tags={localTags} onRemove={onRemove} />\n    </TagBoxBlock>\n  );\n};\n\nexport default TagBox;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport TagBox from '../../components/write/TagBox';\nimport { changeField } from '../../modules/write';\n\nconst TagBoxContainer = () => {\n  const dispatch = useDispatch();\n  const tags = useSelector((state) => state.write.tags);\n\n  const onChangeTags = (nextTags) => {\n    dispatch(\n      changeField({\n        key: 'tags',\n        value: nextTags,\n      }),\n    );\n  };\n\n  return <TagBox onChangeTags={onChangeTags} tags={tags} />;\n};\n\nexport default TagBoxContainer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from '../common/Button';\n\nconst WriteActionButtonsBlock = styled.div`\n  margin-top: 1rem;\n  margin-bottom: 3rem;\n  button + button {\n    margin-left: 0.5rem;\n  }\n`;\n\n/* TagBox에서 사용하는 버튼과 일치하는 높이로 설정한 후 서로 간의 여백 지정 */\nconst StyledButton = styled(Button)`\n  height: 2.125rem;\n  & + & {\n    marign-left: 0.5rem;\n  }\n`;\n\nconst WriteActionButtons = ({ onCancel, onPublish, idEdit }) => {\n  return (\n    <WriteActionButtonsBlock>\n      <StyledButton cyan onClick={onPublish}>\n        포스트 {idEdit ? '수정' : '등록'}\n      </StyledButton>\n      <StyledButton onClick={onCancel}>취소</StyledButton>\n    </WriteActionButtonsBlock>\n  );\n};\n\nexport default WriteActionButtons;\n","import React, { useEffect } from 'react';\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { writePost, updatePost } from '../../modules/write';\n\nconst WriteActionButtonsContainer = ({ history }) => {\n  const dispatch = useDispatch();\n  const { title, body, tags, post, postError, originalPostId } = useSelector(\n    ({ write }) => ({\n      title: write.title,\n      body: write.body,\n      tags: write.tags,\n      post: write.post,\n      postError: write.postError,\n      originalPostId: write.originalPostId,\n    }),\n  );\n\n  // 포스트 등록\n  const onPublish = () => {\n    if (originalPostId) {\n      dispatch(updatePost({ title, body, tags, id: originalPostId }));\n    }\n    dispatch(\n      writePost({\n        title,\n        body,\n        tags,\n      }),\n    );\n  };\n\n  // 취소\n  const onCancel = () => {\n    history.goBack();\n  };\n\n  // 성공 혹은 실패 시 할 작업\n  useEffect(() => {\n    if (post) {\n      const { _id, user } = post;\n      history.push(`/@${user.username}/${_id}`);\n    }\n    if (postError) {\n      console.log(postError);\n    }\n  }, [history, post, postError]);\n  return (\n    <WriteActionButtons\n      onPublish={onPublish}\n      onCancel={onCancel}\n      isEdit={!!originalPostId}\n    />\n  );\n};\n\nexport default withRouter(WriteActionButtonsContainer);\n","import React from 'react';\nimport Responsive from '../components/common/Responsive';\nimport EditorContainer from '../containers/write/EditorContainer';\nimport TagBoxContainer from '../containers/write/TagBoxContainer';\nimport WriteActionButtonsContainer from '../containers/write/WriteActionButtonsContainer';\nimport { Helmet } from 'react-helmet-async';\n\nconst WritePage = () => {\n  return (\n    <Responsive>\n      <Helmet>\n        <title>글 작성하기 - BLOG</title>\n      </Helmet>\n      <EditorContainer />\n      <TagBoxContainer />\n      <WriteActionButtonsContainer />\n    </Responsive>\n  );\n};\n\nexport default WritePage;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport LoginPage from './pages/LoginPage';\nimport PostListPage from './pages/PostListPage';\nimport PostPage from './pages/PostPage';\nimport RegisterPage from './pages/RegisterPage';\nimport WritePage from './pages/WritePage';\nimport { Helmet } from 'react-helmet-async';\n\nconst App = () => {\n  return (\n    <>\n      <Helmet>\n        <title>BLOG</title>\n      </Helmet>\n      <Route component={LoginPage} path=\"/login\" />\n      <Route component={PostListPage} path={['/@:username', '/']} exact />\n      <Route component={PostPage} path=\"/@:username/:postId\" />\n      <Route component={RegisterPage} path=\"/register\" />\n      <Route component={WritePage} path=\"/write\" />\n    </>\n  );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\nimport { all } from 'redux-saga/effects';\nimport auth, { authSaga } from './auth';\nimport loading from './loading';\nimport user, { userSaga } from './user';\nimport write, { writeSaga } from './write';\nimport post, { postSaga } from './post';\nimport posts, { postsSaga } from './posts';\n\nconst rootReducer = combineReducers({\n  auth,\n  loading,\n  user,\n  write,\n  post,\n  posts,\n});\n\nexport function* rootSaga() {\n  yield all([authSaga(), userSaga(), writeSaga(), postSaga(), postsSaga()]);\n}\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer, { rootSaga } from './modules';\nimport createSagaMiddleware from 'redux-saga';\nimport { tempSetUser, check } from './modules/user';\nimport { HelmetProvider } from 'react-helmet-async';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\nfunction loadUser() {\n  try {\n    const user = localStorage.getItem('user');\n    if (!user) return; // 로그인 상태가 아니라면 아무것도 안함\n\n    store.dispatch(tempSetUser(user));\n    store.dispatch(check());\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\n\nsagaMiddleware.run(rootSaga);\nloadUser();\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <HelmetProvider>\n        <App />\n      </HelmetProvider>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}