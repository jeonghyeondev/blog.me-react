{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jeonghyeon/Desktop/kjh/dev/blog-react/blog-frontend/src/containers/auth/RegisterForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeField, initializeForm, register } from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/user';\nimport { withRouter } from 'react-router-dom';\n\nconst RegisterForm = ({\n  history\n}) => {\n  _s();\n\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const {\n    form,\n    auth,\n    authError,\n    user\n  } = useSelector(({\n    auth,\n    user\n  }) => ({\n    form: auth.register,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user\n  })); // 인풋 변경 핸들러\n\n  const onChange = e => {\n    const {\n      value,\n      name\n    } = e.target;\n    dispatch(changeField({\n      form: 'register',\n      key: name,\n      value\n    }));\n  }; // 폼 등록 이벤트 핸들러\n\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const {\n      username,\n      password,\n      passwordConfirm\n    } = form; // 하나라도 비어 있다면\n\n    if ([username, password, passwordConfirm].includes('')) {\n      setError('빈 칸을 모두 입력하세요.');\n      return;\n    } // 비밀번호가 일치하지 않는다면\n\n\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      dispatch(changeField({\n        form: 'register',\n        key: 'password',\n        value: ''\n      }));\n      dispatch(changeField({\n        form: 'register',\n        key: 'passwordConfirm',\n        value: ''\n      }));\n      return;\n    }\n\n    dispatch(register({\n      username,\n      password\n    }));\n  }; // 컴포넌트가 처음 렌덩링될 때 form 초기화함\n\n\n  useEffect(() => {\n    dispatch(initializeForm('register'));\n  }, [dispatch]); // 회원가입 성공/실패 처리\n\n  useEffect(() => {\n    if (authError) {\n      // 계정명이 이미 존재할 때\n      if (authError.response.status === 409) {\n        setError('이미 존재하는 계정명입니다.');\n        return;\n      } // 기타이유\n\n\n      setError('회원가입 실패');\n      return;\n    }\n\n    if (auth) {\n      console.log('회원가입 성공');\n      console.log(auth);\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]); // user 값이 잘 설정되었는지 확인\n\n  useEffect(() => {\n    if (user) {\n      history.push('/'); // 홈 화면으로 이동\n\n      try {\n        localStorage.setItem('user', JSON.stringify(user));\n      } catch (e) {\n        console.log('localStorage is not working');\n      }\n    }\n  }, [history, user]);\n  return /*#__PURE__*/_jsxDEV(AuthForm, {\n    type: \"register\",\n    form: form,\n    onChange: onChange,\n    onSubmit: onSubmit,\n    error: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegisterForm, \"EM9tAJDAw+2iA3Av+vVIkPYU5Yo=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = RegisterForm;\nexport default _c2 = withRouter(RegisterForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RegisterForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/jeonghyeon/Desktop/kjh/dev/blog-react/blog-frontend/src/containers/auth/RegisterForm.js"],"names":["React","useEffect","useState","useDispatch","useSelector","changeField","initializeForm","register","AuthForm","check","withRouter","RegisterForm","history","error","setError","dispatch","form","auth","authError","user","onChange","e","value","name","target","key","onSubmit","preventDefault","username","password","passwordConfirm","includes","response","status","console","log","push","localStorage","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeField, initializeForm, register } from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/user';\nimport { withRouter } from 'react-router-dom';\n\nconst RegisterForm = ({ history }) => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\n    form: auth.register,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user,\n  }));\n\n  // 인풋 변경 핸들러\n  const onChange = (e) => {\n    const { value, name } = e.target;\n    dispatch(\n      changeField({\n        form: 'register',\n        key: name,\n        value,\n      }),\n    );\n  };\n\n  // 폼 등록 이벤트 핸들러\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const { username, password, passwordConfirm } = form;\n    // 하나라도 비어 있다면\n    if ([username, password, passwordConfirm].includes('')) {\n      setError('빈 칸을 모두 입력하세요.');\n      return;\n    }\n    // 비밀번호가 일치하지 않는다면\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      dispatch(changeField({ form: 'register', key: 'password', value: '' }));\n      dispatch(\n        changeField({ form: 'register', key: 'passwordConfirm', value: '' }),\n      );\n      return;\n    }\n    dispatch(register({ username, password }));\n  };\n\n  // 컴포넌트가 처음 렌덩링될 때 form 초기화함\n  useEffect(() => {\n    dispatch(initializeForm('register'));\n  }, [dispatch]);\n\n  // 회원가입 성공/실패 처리\n  useEffect(() => {\n    if (authError) {\n      // 계정명이 이미 존재할 때\n      if (authError.response.status === 409) {\n        setError('이미 존재하는 계정명입니다.');\n        return;\n      }\n      // 기타이유\n      setError('회원가입 실패');\n      return;\n    }\n    if (auth) {\n      console.log('회원가입 성공');\n      console.log(auth);\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]);\n\n  // user 값이 잘 설정되었는지 확인\n  useEffect(() => {\n    if (user) {\n      history.push('/'); // 홈 화면으로 이동\n      try {\n        localStorage.setItem('user', JSON.stringify(user));\n      } catch (e) {\n        console.log('localStorage is not working');\n      }\n    }\n  }, [history, user]);\n\n  return (\n    <AuthForm\n      type=\"register\"\n      form={form}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      error={error}\n    ></AuthForm>\n  );\n};\n\nexport default withRouter(RegisterForm);\n"]},"metadata":{},"sourceType":"module"}