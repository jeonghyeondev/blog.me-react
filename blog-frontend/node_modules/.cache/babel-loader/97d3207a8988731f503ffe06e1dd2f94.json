{"ast":null,"code":"import _regeneratorRuntime from\"/Users/jeonghyeon/Desktop/kjh/dev/blog-react/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jeonghyeon/Desktop/kjh/dev/blog-react/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useEffect}from'react';import{useDispatch,useSelector}from'react-redux';import{withRouter}from'react-router-dom';import{readPost,unloadPost}from'../../modules/post';import PostViewer from'../../components/post/PostViewer';import PostActionButtons from'../../components/post/PostActionButtons';import{setOriginalPost}from'../../modules/write';import{removePost}from'../../lib/api/posts';var PostViewerContainer=function PostViewerContainer(_ref){var match=_ref.match,history=_ref.history;// 처음 마운트될 때 포스트 읽기 API 요청\nvar postId=match.params.postId;var dispatch=useDispatch();var _useSelector=useSelector(function(_ref2){var post=_ref2.post,loading=_ref2.loading,user=_ref2.user;return{post:post.post,error:post.error,loading:loading['post/READ_POST'],user:user.user};}),post=_useSelector.post,error=_useSelector.error,loading=_useSelector.loading,user=_useSelector.user;useEffect(function(){dispatch(readPost(postId));// 언마운트될 때 리덕스에서 포스트 데이터 없애기\nreturn function(){dispatch(unloadPost());};},[dispatch,postId]);var onEdit=function onEdit(){dispatch(setOriginalPost(post));history.push('/write');};var onRemove=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return removePost(postId);case 3:history.push('/');// 홈으로 이동\n_context.next=9;break;case 6:_context.prev=6;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 9:case\"end\":return _context.stop();}}},_callee,null,[[0,6]]);}));return function onRemove(){return _ref3.apply(this,arguments);};}();var ownPost=(user&&user._id)===(post&&post.user._id);return/*#__PURE__*/_jsx(PostViewer,{post:post,loading:loading,error:error,actionButtons:ownPost&&/*#__PURE__*/_jsx(PostActionButtons,{onEdit:onEdit,onRemove:onRemove})});};export default withRouter(PostViewerContainer);","map":{"version":3,"sources":["/Users/jeonghyeon/Desktop/kjh/dev/blog-react/blog-frontend/src/containers/post/PostViewerContainer.js"],"names":["React","useEffect","useDispatch","useSelector","withRouter","readPost","unloadPost","PostViewer","PostActionButtons","setOriginalPost","removePost","PostViewerContainer","match","history","postId","params","dispatch","post","loading","user","error","onEdit","push","onRemove","console","log","ownPost","_id"],"mappings":"0YAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,UAAT,KAA2B,kBAA3B,CACA,OAASC,QAAT,CAAmBC,UAAnB,KAAqC,oBAArC,CACA,MAAOC,CAAAA,UAAP,KAAuB,kCAAvB,CACA,MAAOC,CAAAA,iBAAP,KAA8B,yCAA9B,CACA,OAASC,eAAT,KAAgC,qBAAhC,CACA,OAASC,UAAT,KAA2B,qBAA3B,CAEA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,MAAwB,IAArBC,CAAAA,KAAqB,MAArBA,KAAqB,CAAdC,OAAc,MAAdA,OAAc,CAClD;AADkD,GAE1CC,CAAAA,MAF0C,CAE/BF,KAAK,CAACG,MAFyB,CAE1CD,MAF0C,CAGlD,GAAME,CAAAA,QAAQ,CAAGd,WAAW,EAA5B,CAHkD,iBAIXC,WAAW,CAChD,mBAAGc,CAAAA,IAAH,OAAGA,IAAH,CAASC,OAAT,OAASA,OAAT,CAAkBC,IAAlB,OAAkBA,IAAlB,OAA8B,CAC5BF,IAAI,CAAEA,IAAI,CAACA,IADiB,CAE5BG,KAAK,CAAEH,IAAI,CAACG,KAFgB,CAG5BF,OAAO,CAAEA,OAAO,CAAC,gBAAD,CAHY,CAI5BC,IAAI,CAAEA,IAAI,CAACA,IAJiB,CAA9B,EADgD,CAJA,CAI1CF,IAJ0C,cAI1CA,IAJ0C,CAIpCG,KAJoC,cAIpCA,KAJoC,CAI7BF,OAJ6B,cAI7BA,OAJ6B,CAIpBC,IAJoB,cAIpBA,IAJoB,CAalDlB,SAAS,CAAC,UAAM,CACde,QAAQ,CAACX,QAAQ,CAACS,MAAD,CAAT,CAAR,CACA;AACA,MAAO,WAAM,CACXE,QAAQ,CAACV,UAAU,EAAX,CAAR,CACD,CAFD,CAGD,CANQ,CAMN,CAACU,QAAD,CAAWF,MAAX,CANM,CAAT,CAQA,GAAMO,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,CACnBL,QAAQ,CAACP,eAAe,CAACQ,IAAD,CAAhB,CAAR,CACAJ,OAAO,CAACS,IAAR,CAAa,QAAb,EACD,CAHD,CAKA,GAAMC,CAAAA,QAAQ,2FAAG,yKAEPb,CAAAA,UAAU,CAACI,MAAD,CAFH,QAGbD,OAAO,CAACS,IAAR,CAAa,GAAb,EAAmB;AAHN,8EAKbE,OAAO,CAACC,GAAR,cALa,mEAAH,kBAARF,CAAAA,QAAQ,2CAAd,CASA,GAAMG,CAAAA,OAAO,CAAG,CAACP,IAAI,EAAIA,IAAI,CAACQ,GAAd,KAAwBV,IAAI,EAAIA,IAAI,CAACE,IAAL,CAAUQ,GAA1C,CAAhB,CAEA,mBACE,KAAC,UAAD,EACE,IAAI,CAAEV,IADR,CAEE,OAAO,CAAEC,OAFX,CAGE,KAAK,CAAEE,KAHT,CAIE,aAAa,CACXM,OAAO,eAAI,KAAC,iBAAD,EAAmB,MAAM,CAAEL,MAA3B,CAAmC,QAAQ,CAAEE,QAA7C,EALf,EADF,CAUD,CA/CD,CAiDA,cAAenB,CAAAA,UAAU,CAACO,mBAAD,CAAzB","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { readPost, unloadPost } from '../../modules/post';\nimport PostViewer from '../../components/post/PostViewer';\nimport PostActionButtons from '../../components/post/PostActionButtons';\nimport { setOriginalPost } from '../../modules/write';\nimport { removePost } from '../../lib/api/posts';\n\nconst PostViewerContainer = ({ match, history }) => {\n  // 처음 마운트될 때 포스트 읽기 API 요청\n  const { postId } = match.params;\n  const dispatch = useDispatch();\n  const { post, error, loading, user } = useSelector(\n    ({ post, loading, user }) => ({\n      post: post.post,\n      error: post.error,\n      loading: loading['post/READ_POST'],\n      user: user.user,\n    }),\n  );\n\n  useEffect(() => {\n    dispatch(readPost(postId));\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\n    return () => {\n      dispatch(unloadPost());\n    };\n  }, [dispatch, postId]);\n\n  const onEdit = () => {\n    dispatch(setOriginalPost(post));\n    history.push('/write');\n  };\n\n  const onRemove = async () => {\n    try {\n      await removePost(postId);\n      history.push('/'); // 홈으로 이동\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const ownPost = (user && user._id) === (post && post.user._id);\n\n  return (\n    <PostViewer\n      post={post}\n      loading={loading}\n      error={error}\n      actionButtons={\n        ownPost && <PostActionButtons onEdit={onEdit} onRemove={onRemove} />\n      }\n    />\n  );\n};\n\nexport default withRouter(PostViewerContainer);\n"]},"metadata":{},"sourceType":"module"}