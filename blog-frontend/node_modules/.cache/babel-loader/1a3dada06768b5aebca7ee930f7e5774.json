{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useEffect}from'react';import WriteActionButtons from'../../components/write/WriteActionButtons';import{useSelector,useDispatch}from'react-redux';import{withRouter}from'react-router-dom';import{writePost,updatePost}from'../../modules/write';var WriteActionButtonsContainer=function WriteActionButtonsContainer(_ref){var history=_ref.history;var dispatch=useDispatch();var _useSelector=useSelector(function(_ref2){var write=_ref2.write;return{title:write.title,body:write.body,tags:write.tags,post:write.post,postError:write.postError,originalPostId:write.originalPostId};}),title=_useSelector.title,body=_useSelector.body,tags=_useSelector.tags,post=_useSelector.post,postError=_useSelector.postError,originalPostId=_useSelector.originalPostId;// 포스트 등록\nvar onPublish=function onPublish(){if(originalPostId){dispatch(updatePost({title:title,body:body,tags:tags,id:originalPostId}));}dispatch(writePost({title:title,body:body,tags:tags}));};// 취소\nvar onCancel=function onCancel(){history.goBack();};// 성공 혹은 실패 시 할 작업\nuseEffect(function(){if(post){var _id=post._id,user=post.user;history.push(\"/@\".concat(user.username,\"/\").concat(_id));}if(postError){console.log(postError);}},[history,post,postError]);return/*#__PURE__*/_jsx(WriteActionButtons,{onPublish:onPublish,onCancel:onCancel,isEdit:!!originalPostId});};export default withRouter(WriteActionButtonsContainer);","map":{"version":3,"sources":["/Users/jeonghyeon/Desktop/kjh/dev/blog-react/blog-frontend/src/containers/write/WriteActionButtonsContainer.js"],"names":["React","useEffect","WriteActionButtons","useSelector","useDispatch","withRouter","writePost","updatePost","WriteActionButtonsContainer","history","dispatch","write","title","body","tags","post","postError","originalPostId","onPublish","id","onCancel","goBack","_id","user","push","username","console","log"],"mappings":"2CAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,kBAAP,KAA+B,2CAA/B,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,UAAT,KAA2B,kBAA3B,CACA,OAASC,SAAT,CAAoBC,UAApB,KAAsC,qBAAtC,CAEA,GAAMC,CAAAA,2BAA2B,CAAG,QAA9BA,CAAAA,2BAA8B,MAAiB,IAAdC,CAAAA,OAAc,MAAdA,OAAc,CACnD,GAAMC,CAAAA,QAAQ,CAAGN,WAAW,EAA5B,CADmD,iBAEYD,WAAW,CACxE,mBAAGQ,CAAAA,KAAH,OAAGA,KAAH,OAAgB,CACdC,KAAK,CAAED,KAAK,CAACC,KADC,CAEdC,IAAI,CAAEF,KAAK,CAACE,IAFE,CAGdC,IAAI,CAAEH,KAAK,CAACG,IAHE,CAIdC,IAAI,CAAEJ,KAAK,CAACI,IAJE,CAKdC,SAAS,CAAEL,KAAK,CAACK,SALH,CAMdC,cAAc,CAAEN,KAAK,CAACM,cANR,CAAhB,EADwE,CAFvB,CAE3CL,KAF2C,cAE3CA,KAF2C,CAEpCC,IAFoC,cAEpCA,IAFoC,CAE9BC,IAF8B,cAE9BA,IAF8B,CAExBC,IAFwB,cAExBA,IAFwB,CAElBC,SAFkB,cAElBA,SAFkB,CAEPC,cAFO,cAEPA,cAFO,CAanD;AACA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtB,GAAID,cAAJ,CAAoB,CAClBP,QAAQ,CAACH,UAAU,CAAC,CAAEK,KAAK,CAALA,KAAF,CAASC,IAAI,CAAJA,IAAT,CAAeC,IAAI,CAAJA,IAAf,CAAqBK,EAAE,CAAEF,cAAzB,CAAD,CAAX,CAAR,CACD,CACDP,QAAQ,CACNJ,SAAS,CAAC,CACRM,KAAK,CAALA,KADQ,CAERC,IAAI,CAAJA,IAFQ,CAGRC,IAAI,CAAJA,IAHQ,CAAD,CADH,CAAR,CAOD,CAXD,CAaA;AACA,GAAMM,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrBX,OAAO,CAACY,MAAR,GACD,CAFD,CAIA;AACApB,SAAS,CAAC,UAAM,CACd,GAAIc,IAAJ,CAAU,IACAO,CAAAA,GADA,CACcP,IADd,CACAO,GADA,CACKC,IADL,CACcR,IADd,CACKQ,IADL,CAERd,OAAO,CAACe,IAAR,aAAkBD,IAAI,CAACE,QAAvB,aAAmCH,GAAnC,GACD,CACD,GAAIN,SAAJ,CAAe,CACbU,OAAO,CAACC,GAAR,CAAYX,SAAZ,EACD,CACF,CARQ,CAQN,CAACP,OAAD,CAAUM,IAAV,CAAgBC,SAAhB,CARM,CAAT,CASA,mBACE,KAAC,kBAAD,EACE,SAAS,CAAEE,SADb,CAEE,QAAQ,CAAEE,QAFZ,CAGE,MAAM,CAAE,CAAC,CAACH,cAHZ,EADF,CAOD,CAjDD,CAmDA,cAAeZ,CAAAA,UAAU,CAACG,2BAAD,CAAzB","sourcesContent":["import React, { useEffect } from 'react';\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { writePost, updatePost } from '../../modules/write';\n\nconst WriteActionButtonsContainer = ({ history }) => {\n  const dispatch = useDispatch();\n  const { title, body, tags, post, postError, originalPostId } = useSelector(\n    ({ write }) => ({\n      title: write.title,\n      body: write.body,\n      tags: write.tags,\n      post: write.post,\n      postError: write.postError,\n      originalPostId: write.originalPostId,\n    }),\n  );\n\n  // 포스트 등록\n  const onPublish = () => {\n    if (originalPostId) {\n      dispatch(updatePost({ title, body, tags, id: originalPostId }));\n    }\n    dispatch(\n      writePost({\n        title,\n        body,\n        tags,\n      }),\n    );\n  };\n\n  // 취소\n  const onCancel = () => {\n    history.goBack();\n  };\n\n  // 성공 혹은 실패 시 할 작업\n  useEffect(() => {\n    if (post) {\n      const { _id, user } = post;\n      history.push(`/@${user.username}/${_id}`);\n    }\n    if (postError) {\n      console.log(postError);\n    }\n  }, [history, post, postError]);\n  return (\n    <WriteActionButtons\n      onPublish={onPublish}\n      onCancel={onCancel}\n      isEdit={!!originalPostId}\n    />\n  );\n};\n\nexport default withRouter(WriteActionButtonsContainer);\n"]},"metadata":{},"sourceType":"module"}