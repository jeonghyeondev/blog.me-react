{"ast":null,"code":"'use strict';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable local/ban-types-eventually, local/prefer-rest-params-eventually */\n// | Window â€“ add once TS improves typings;\n\n/**\n * Possible types of a MockFunctionResult.\n * 'return': The call completed by returning normally.\n * 'throw': The call completed by throwing a value.\n * 'incomplete': The call has not completed yet. This is possible if you read\n *               the  mock function result from within the mock function itself\n *               (or a function called by the mock function).\n */\n\n/**\n * Represents the result of a single call to a mock function.\n */\n// see https://github.com/Microsoft/TypeScript/issues/25215\n\n\nconst MOCK_CONSTRUCTOR_NAME = 'mockConstructor';\nconst FUNCTION_NAME_RESERVED_PATTERN = /[\\s!-\\/:-@\\[-`{-~]/;\nconst FUNCTION_NAME_RESERVED_REPLACE = new RegExp(FUNCTION_NAME_RESERVED_PATTERN.source, 'g');\nconst RESERVED_KEYWORDS = new Set(['arguments', 'await', 'break', 'case', 'catch', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'else', 'enum', 'eval', 'export', 'extends', 'false', 'finally', 'for', 'function', 'if', 'implements', 'import', 'in', 'instanceof', 'interface', 'let', 'new', 'null', 'package', 'private', 'protected', 'public', 'return', 'static', 'super', 'switch', 'this', 'throw', 'true', 'try', 'typeof', 'var', 'void', 'while', 'with', 'yield']);\n\nfunction matchArity(fn, length) {\n  let mockConstructor;\n\n  switch (length) {\n    case 1:\n      mockConstructor = function (_a) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 2:\n      mockConstructor = function (_a, _b) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 3:\n      mockConstructor = function (_a, _b, _c) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 4:\n      mockConstructor = function (_a, _b, _c, _d) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 5:\n      mockConstructor = function (_a, _b, _c, _d, _e) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 6:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 7:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 8:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g, _h) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 9:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g, _h, _i) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    default:\n      mockConstructor = function () {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n  }\n\n  return mockConstructor;\n}\n\nfunction getObjectType(value) {\n  return Object.prototype.toString.apply(value).slice(8, -1);\n}\n\nfunction getType(ref) {\n  const typeName = getObjectType(ref);\n\n  if (typeName === 'Function' || typeName === 'AsyncFunction' || typeName === 'GeneratorFunction') {\n    return 'function';\n  } else if (Array.isArray(ref)) {\n    return 'array';\n  } else if (typeName === 'Object') {\n    return 'object';\n  } else if (typeName === 'Number' || typeName === 'String' || typeName === 'Boolean' || typeName === 'Symbol') {\n    return 'constant';\n  } else if (typeName === 'Map' || typeName === 'WeakMap' || typeName === 'Set') {\n    return 'collection';\n  } else if (typeName === 'RegExp') {\n    return 'regexp';\n  } else if (ref === undefined) {\n    return 'undefined';\n  } else if (ref === null) {\n    return 'null';\n  } else {\n    return null;\n  }\n}\n\nfunction isReadonlyProp(object, prop) {\n  if (prop === 'arguments' || prop === 'caller' || prop === 'callee' || prop === 'name' || prop === 'length') {\n    const typeName = getObjectType(object);\n    return typeName === 'Function' || typeName === 'AsyncFunction' || typeName === 'GeneratorFunction';\n  }\n\n  if (prop === 'source' || prop === 'global' || prop === 'ignoreCase' || prop === 'multiline') {\n    return getObjectType(object) === 'RegExp';\n  }\n\n  return false;\n}\n\nclass ModuleMockerClass {\n  /**\n   * @see README.md\n   * @param global Global object of the test environment, used to create\n   * mocks\n   */\n  constructor(global) {\n    _defineProperty(this, '_environmentGlobal', void 0);\n\n    _defineProperty(this, '_mockState', void 0);\n\n    _defineProperty(this, '_mockConfigRegistry', void 0);\n\n    _defineProperty(this, '_spyState', void 0);\n\n    _defineProperty(this, '_invocationCallCounter', void 0);\n\n    _defineProperty(this, 'ModuleMocker', void 0);\n\n    this._environmentGlobal = global;\n    this._mockState = new WeakMap();\n    this._mockConfigRegistry = new WeakMap();\n    this._spyState = new Set();\n    this.ModuleMocker = ModuleMockerClass;\n    this._invocationCallCounter = 1;\n  }\n\n  _getSlots(object) {\n    if (!object) {\n      return [];\n    }\n\n    const slots = new Set();\n    const EnvObjectProto = this._environmentGlobal.Object.prototype;\n    const EnvFunctionProto = this._environmentGlobal.Function.prototype;\n    const EnvRegExpProto = this._environmentGlobal.RegExp.prototype; // Also check the builtins in the current context as they leak through\n    // core node modules.\n\n    const ObjectProto = Object.prototype;\n    const FunctionProto = Function.prototype;\n    const RegExpProto = RegExp.prototype; // Properties of Object.prototype, Function.prototype and RegExp.prototype\n    // are never reported as slots\n\n    while (object != null && object !== EnvObjectProto && object !== EnvFunctionProto && object !== EnvRegExpProto && object !== ObjectProto && object !== FunctionProto && object !== RegExpProto) {\n      const ownNames = Object.getOwnPropertyNames(object);\n\n      for (let i = 0; i < ownNames.length; i++) {\n        const prop = ownNames[i];\n\n        if (!isReadonlyProp(object, prop)) {\n          const propDesc = Object.getOwnPropertyDescriptor(object, prop);\n\n          if (propDesc !== undefined && !propDesc.get || object.__esModule) {\n            slots.add(prop);\n          }\n        }\n      }\n\n      object = Object.getPrototypeOf(object);\n    }\n\n    return Array.from(slots);\n  }\n\n  _ensureMockConfig(f) {\n    let config = this._mockConfigRegistry.get(f);\n\n    if (!config) {\n      config = this._defaultMockConfig();\n\n      this._mockConfigRegistry.set(f, config);\n    }\n\n    return config;\n  }\n\n  _ensureMockState(f) {\n    let state = this._mockState.get(f);\n\n    if (!state) {\n      state = this._defaultMockState();\n\n      this._mockState.set(f, state);\n    }\n\n    return state;\n  }\n\n  _defaultMockConfig() {\n    return {\n      mockImpl: undefined,\n      mockName: 'jest.fn()',\n      specificMockImpls: [],\n      specificReturnValues: []\n    };\n  }\n\n  _defaultMockState() {\n    return {\n      calls: [],\n      instances: [],\n      invocationCallOrder: [],\n      results: []\n    };\n  }\n\n  _makeComponent(metadata, restore) {\n    if (metadata.type === 'object') {\n      return new this._environmentGlobal.Object();\n    } else if (metadata.type === 'array') {\n      return new this._environmentGlobal.Array();\n    } else if (metadata.type === 'regexp') {\n      return new this._environmentGlobal.RegExp('');\n    } else if (metadata.type === 'constant' || metadata.type === 'collection' || metadata.type === 'null' || metadata.type === 'undefined') {\n      return metadata.value;\n    } else if (metadata.type === 'function') {\n      const prototype = metadata.members && metadata.members.prototype && metadata.members.prototype.members || {};\n\n      const prototypeSlots = this._getSlots(prototype);\n\n      const mocker = this;\n      const mockConstructor = matchArity(function (...args) {\n        const mockState = mocker._ensureMockState(f);\n\n        const mockConfig = mocker._ensureMockConfig(f);\n\n        mockState.instances.push(this);\n        mockState.calls.push(args); // Create and record an \"incomplete\" mock result immediately upon\n        // calling rather than waiting for the mock to return. This avoids\n        // issues caused by recursion where results can be recorded in the\n        // wrong order.\n\n        const mockResult = {\n          type: 'incomplete',\n          value: undefined\n        };\n        mockState.results.push(mockResult);\n        mockState.invocationCallOrder.push(mocker._invocationCallCounter++); // Will be set to the return value of the mock if an error is not thrown\n\n        let finalReturnValue; // Will be set to the error that is thrown by the mock (if it throws)\n\n        let thrownError; // Will be set to true if the mock throws an error. The presence of a\n        // value in `thrownError` is not a 100% reliable indicator because a\n        // function could throw a value of undefined.\n\n        let callDidThrowError = false;\n\n        try {\n          // The bulk of the implementation is wrapped in an immediately\n          // executed arrow function so the return value of the mock function\n          // can be easily captured and recorded, despite the many separate\n          // return points within the logic.\n          finalReturnValue = (() => {\n            if (this instanceof f) {\n              // This is probably being called as a constructor\n              prototypeSlots.forEach(slot => {\n                // Copy prototype methods to the instance to make\n                // it easier to interact with mock instance call and\n                // return values\n                if (prototype[slot].type === 'function') {\n                  // @ts-expect-error no index signature\n                  const protoImpl = this[slot]; // @ts-expect-error no index signature\n\n                  this[slot] = mocker.generateFromMetadata(prototype[slot]); // @ts-expect-error no index signature\n\n                  this[slot]._protoImpl = protoImpl;\n                }\n              }); // Run the mock constructor implementation\n\n              const mockImpl = mockConfig.specificMockImpls.length ? mockConfig.specificMockImpls.shift() : mockConfig.mockImpl;\n              return mockImpl && mockImpl.apply(this, arguments);\n            } // If mockImplementationOnce()/mockImplementation() is last set,\n            // implementation use the mock\n\n\n            let specificMockImpl = mockConfig.specificMockImpls.shift();\n\n            if (specificMockImpl === undefined) {\n              specificMockImpl = mockConfig.mockImpl;\n            }\n\n            if (specificMockImpl) {\n              return specificMockImpl.apply(this, arguments);\n            } // Otherwise use prototype implementation\n\n\n            if (f._protoImpl) {\n              return f._protoImpl.apply(this, arguments);\n            }\n\n            return undefined;\n          })();\n        } catch (error) {\n          // Store the thrown error so we can record it, then re-throw it.\n          thrownError = error;\n          callDidThrowError = true;\n          throw error;\n        } finally {\n          // Record the result of the function.\n          // NOTE: Intentionally NOT pushing/indexing into the array of mock\n          //       results here to avoid corrupting results data if mockClear()\n          //       is called during the execution of the mock.\n          mockResult.type = callDidThrowError ? 'throw' : 'return';\n          mockResult.value = callDidThrowError ? thrownError : finalReturnValue;\n        }\n\n        return finalReturnValue;\n      }, metadata.length || 0);\n\n      const f = this._createMockFunction(metadata, mockConstructor);\n\n      f._isMockFunction = true;\n\n      f.getMockImplementation = () => this._ensureMockConfig(f).mockImpl;\n\n      if (typeof restore === 'function') {\n        this._spyState.add(restore);\n      }\n\n      this._mockState.set(f, this._defaultMockState());\n\n      this._mockConfigRegistry.set(f, this._defaultMockConfig());\n\n      Object.defineProperty(f, 'mock', {\n        configurable: false,\n        enumerable: true,\n        get: () => this._ensureMockState(f),\n        set: val => this._mockState.set(f, val)\n      });\n\n      f.mockClear = () => {\n        this._mockState.delete(f);\n\n        return f;\n      };\n\n      f.mockReset = () => {\n        f.mockClear();\n\n        this._mockConfigRegistry.delete(f);\n\n        return f;\n      };\n\n      f.mockRestore = () => {\n        f.mockReset();\n        return restore ? restore() : undefined;\n      };\n\n      f.mockReturnValueOnce = (value // next function call will return this value or default return value\n      ) => f.mockImplementationOnce(() => value);\n\n      f.mockResolvedValueOnce = value => f.mockImplementationOnce(() => Promise.resolve(value));\n\n      f.mockRejectedValueOnce = value => f.mockImplementationOnce(() => Promise.reject(value));\n\n      f.mockReturnValue = (value // next function call will return specified return value or this one\n      ) => f.mockImplementation(() => value);\n\n      f.mockResolvedValue = value => f.mockImplementation(() => Promise.resolve(value));\n\n      f.mockRejectedValue = value => f.mockImplementation(() => Promise.reject(value));\n\n      f.mockImplementationOnce = fn => {\n        // next function call will use this mock implementation return value\n        // or default mock implementation return value\n        const mockConfig = this._ensureMockConfig(f);\n\n        mockConfig.specificMockImpls.push(fn);\n        return f;\n      };\n\n      f.mockImplementation = fn => {\n        // next function call will use mock implementation return value\n        const mockConfig = this._ensureMockConfig(f);\n\n        mockConfig.mockImpl = fn;\n        return f;\n      };\n\n      f.mockReturnThis = () => f.mockImplementation(function () {\n        return this;\n      });\n\n      f.mockName = name => {\n        if (name) {\n          const mockConfig = this._ensureMockConfig(f);\n\n          mockConfig.mockName = name;\n        }\n\n        return f;\n      };\n\n      f.getMockName = () => {\n        const mockConfig = this._ensureMockConfig(f);\n\n        return mockConfig.mockName || 'jest.fn()';\n      };\n\n      if (metadata.mockImpl) {\n        f.mockImplementation(metadata.mockImpl);\n      }\n\n      return f;\n    } else {\n      const unknownType = metadata.type || 'undefined type';\n      throw new Error('Unrecognized type ' + unknownType);\n    }\n  }\n\n  _createMockFunction(metadata, mockConstructor) {\n    let name = metadata.name;\n\n    if (!name) {\n      return mockConstructor;\n    } // Preserve `name` property of mocked function.\n\n\n    const boundFunctionPrefix = 'bound ';\n    let bindCall = ''; // if-do-while for perf reasons. The common case is for the if to fail.\n\n    if (name && name.startsWith(boundFunctionPrefix)) {\n      do {\n        name = name.substring(boundFunctionPrefix.length); // Call bind() just to alter the function name.\n\n        bindCall = '.bind(null)';\n      } while (name && name.startsWith(boundFunctionPrefix));\n    } // Special case functions named `mockConstructor` to guard for infinite\n    // loops.\n\n\n    if (name === MOCK_CONSTRUCTOR_NAME) {\n      return mockConstructor;\n    }\n\n    if ( // It's a syntax error to define functions with a reserved keyword\n    // as name.\n    RESERVED_KEYWORDS.has(name) || // It's also a syntax error to define functions with a name that starts with a number\n    /^\\d/.test(name)) {\n      name = '$' + name;\n    } // It's also a syntax error to define a function with a reserved character\n    // as part of it's name.\n\n\n    if (FUNCTION_NAME_RESERVED_PATTERN.test(name)) {\n      name = name.replace(FUNCTION_NAME_RESERVED_REPLACE, '$');\n    }\n\n    const body = 'return function ' + name + '() {' + 'return ' + MOCK_CONSTRUCTOR_NAME + '.apply(this,arguments);' + '}' + bindCall;\n    const createConstructor = new this._environmentGlobal.Function(MOCK_CONSTRUCTOR_NAME, body);\n    return createConstructor(mockConstructor);\n  }\n\n  _generateMock(metadata, callbacks, refs) {\n    // metadata not compatible but it's the same type, maybe problem with\n    // overloading of _makeComponent and not _generateMock?\n    // @ts-expect-error\n    const mock = this._makeComponent(metadata);\n\n    if (metadata.refID != null) {\n      refs[metadata.refID] = mock;\n    }\n\n    this._getSlots(metadata.members).forEach(slot => {\n      const slotMetadata = metadata.members && metadata.members[slot] || {};\n\n      if (slotMetadata.ref != null) {\n        callbacks.push(function (ref) {\n          return () => mock[slot] = refs[ref];\n        }(slotMetadata.ref));\n      } else {\n        mock[slot] = this._generateMock(slotMetadata, callbacks, refs);\n      }\n    });\n\n    if (metadata.type !== 'undefined' && metadata.type !== 'null' && mock.prototype && typeof mock.prototype === 'object') {\n      mock.prototype.constructor = mock;\n    }\n\n    return mock;\n  }\n  /**\n   * @see README.md\n   * @param _metadata Metadata for the mock in the schema returned by the\n   * getMetadata method of this module.\n   */\n\n\n  generateFromMetadata(_metadata) {\n    const callbacks = [];\n    const refs = {};\n\n    const mock = this._generateMock(_metadata, callbacks, refs);\n\n    callbacks.forEach(setter => setter());\n    return mock;\n  }\n  /**\n   * @see README.md\n   * @param component The component for which to retrieve metadata.\n   */\n\n\n  getMetadata(component, _refs) {\n    const refs = _refs || new Map();\n    const ref = refs.get(component);\n\n    if (ref != null) {\n      return {\n        ref\n      };\n    }\n\n    const type = getType(component);\n\n    if (!type) {\n      return null;\n    }\n\n    const metadata = {\n      type\n    };\n\n    if (type === 'constant' || type === 'collection' || type === 'undefined' || type === 'null') {\n      metadata.value = component;\n      return metadata;\n    } else if (type === 'function') {\n      // @ts-expect-error this is a function so it has a name\n      metadata.name = component.name; // @ts-expect-error may be a mock\n\n      if (component._isMockFunction === true) {\n        // @ts-expect-error may be a mock\n        metadata.mockImpl = component.getMockImplementation();\n      }\n    }\n\n    metadata.refID = refs.size;\n    refs.set(component, metadata.refID);\n    let members = null; // Leave arrays alone\n\n    if (type !== 'array') {\n      this._getSlots(component).forEach(slot => {\n        if (type === 'function' && // @ts-expect-error may be a mock\n        component._isMockFunction === true && slot.match(/^mock/)) {\n          return;\n        } // @ts-expect-error no index signature\n\n\n        const slotMetadata = this.getMetadata(component[slot], refs);\n\n        if (slotMetadata) {\n          if (!members) {\n            members = {};\n          }\n\n          members[slot] = slotMetadata;\n        }\n      });\n    }\n\n    if (members) {\n      metadata.members = members;\n    }\n\n    return metadata;\n  }\n\n  isMockFunction(fn) {\n    return !!fn && fn._isMockFunction === true;\n  }\n\n  fn(implementation) {\n    const length = implementation ? implementation.length : 0;\n\n    const fn = this._makeComponent({\n      length,\n      type: 'function'\n    });\n\n    if (implementation) {\n      fn.mockImplementation(implementation);\n    }\n\n    return fn;\n  }\n\n  spyOn(object, methodName, accessType) {\n    if (accessType) {\n      return this._spyOnProperty(object, methodName, accessType);\n    }\n\n    if (typeof object !== 'object' && typeof object !== 'function') {\n      throw new Error('Cannot spyOn on a primitive value; ' + this._typeOf(object) + ' given');\n    }\n\n    const original = object[methodName];\n\n    if (!this.isMockFunction(original)) {\n      if (typeof original !== 'function') {\n        throw new Error('Cannot spy the ' + methodName + ' property because it is not a function; ' + this._typeOf(original) + ' given instead');\n      }\n\n      const isMethodOwner = object.hasOwnProperty(methodName);\n      let descriptor = Object.getOwnPropertyDescriptor(object, methodName);\n      let proto = Object.getPrototypeOf(object);\n\n      while (!descriptor && proto !== null) {\n        descriptor = Object.getOwnPropertyDescriptor(proto, methodName);\n        proto = Object.getPrototypeOf(proto);\n      }\n\n      let mock;\n\n      if (descriptor && descriptor.get) {\n        const originalGet = descriptor.get;\n        mock = this._makeComponent({\n          type: 'function'\n        }, () => {\n          descriptor.get = originalGet;\n          Object.defineProperty(object, methodName, descriptor);\n        });\n\n        descriptor.get = () => mock;\n\n        Object.defineProperty(object, methodName, descriptor);\n      } else {\n        mock = this._makeComponent({\n          type: 'function'\n        }, () => {\n          if (isMethodOwner) {\n            object[methodName] = original;\n          } else {\n            delete object[methodName];\n          }\n        }); // @ts-expect-error overriding original method with a Mock\n\n        object[methodName] = mock;\n      }\n\n      mock.mockImplementation(function () {\n        return original.apply(this, arguments);\n      });\n    }\n\n    return object[methodName];\n  }\n\n  _spyOnProperty(obj, propertyName, accessType = 'get') {\n    if (typeof obj !== 'object' && typeof obj !== 'function') {\n      throw new Error('Cannot spyOn on a primitive value; ' + this._typeOf(obj) + ' given');\n    }\n\n    if (!obj) {\n      throw new Error('spyOn could not find an object to spy upon for ' + propertyName + '');\n    }\n\n    if (!propertyName) {\n      throw new Error('No property name supplied');\n    }\n\n    let descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);\n    let proto = Object.getPrototypeOf(obj);\n\n    while (!descriptor && proto !== null) {\n      descriptor = Object.getOwnPropertyDescriptor(proto, propertyName);\n      proto = Object.getPrototypeOf(proto);\n    }\n\n    if (!descriptor) {\n      throw new Error(propertyName + ' property does not exist');\n    }\n\n    if (!descriptor.configurable) {\n      throw new Error(propertyName + ' is not declared configurable');\n    }\n\n    if (!descriptor[accessType]) {\n      throw new Error('Property ' + propertyName + ' does not have access type ' + accessType);\n    }\n\n    const original = descriptor[accessType];\n\n    if (!this.isMockFunction(original)) {\n      if (typeof original !== 'function') {\n        throw new Error('Cannot spy the ' + propertyName + ' property because it is not a function; ' + this._typeOf(original) + ' given instead');\n      } // @ts-expect-error: mock is assignable\n\n\n      descriptor[accessType] = this._makeComponent({\n        type: 'function'\n      }, () => {\n        // @ts-expect-error: mock is assignable\n        descriptor[accessType] = original;\n        Object.defineProperty(obj, propertyName, descriptor);\n      });\n      descriptor[accessType].mockImplementation(function () {\n        // @ts-expect-error\n        return original.apply(this, arguments);\n      });\n    }\n\n    Object.defineProperty(obj, propertyName, descriptor);\n    return descriptor[accessType];\n  }\n\n  clearAllMocks() {\n    this._mockState = new WeakMap();\n  }\n\n  resetAllMocks() {\n    this._mockConfigRegistry = new WeakMap();\n    this._mockState = new WeakMap();\n  }\n\n  restoreAllMocks() {\n    this._spyState.forEach(restore => restore());\n\n    this._spyState = new Set();\n  }\n\n  _typeOf(value) {\n    return value == null ? '' + value : typeof value;\n  }\n\n}\n\nconst JestMock = new ModuleMockerClass(global);\nmodule.exports = JestMock;","map":{"version":3,"sources":["/Users/jeonghyeon/Desktop/kjh/dev/blog-react/blog-frontend/node_modules/jest-mock/build/index.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","MOCK_CONSTRUCTOR_NAME","FUNCTION_NAME_RESERVED_PATTERN","FUNCTION_NAME_RESERVED_REPLACE","RegExp","source","RESERVED_KEYWORDS","Set","matchArity","fn","length","mockConstructor","_a","apply","arguments","_b","_c","_d","_e","_f","_g","_h","_i","getObjectType","prototype","toString","slice","getType","ref","typeName","Array","isArray","undefined","isReadonlyProp","object","prop","ModuleMockerClass","constructor","global","_environmentGlobal","_mockState","WeakMap","_mockConfigRegistry","_spyState","ModuleMocker","_invocationCallCounter","_getSlots","slots","EnvObjectProto","EnvFunctionProto","Function","EnvRegExpProto","ObjectProto","FunctionProto","RegExpProto","ownNames","getOwnPropertyNames","i","propDesc","getOwnPropertyDescriptor","get","__esModule","add","getPrototypeOf","from","_ensureMockConfig","f","config","_defaultMockConfig","set","_ensureMockState","state","_defaultMockState","mockImpl","mockName","specificMockImpls","specificReturnValues","calls","instances","invocationCallOrder","results","_makeComponent","metadata","restore","type","members","prototypeSlots","mocker","args","mockState","mockConfig","push","mockResult","finalReturnValue","thrownError","callDidThrowError","forEach","slot","protoImpl","generateFromMetadata","_protoImpl","shift","specificMockImpl","error","_createMockFunction","_isMockFunction","getMockImplementation","val","mockClear","delete","mockReset","mockRestore","mockReturnValueOnce","mockImplementationOnce","mockResolvedValueOnce","Promise","resolve","mockRejectedValueOnce","reject","mockReturnValue","mockImplementation","mockResolvedValue","mockRejectedValue","mockReturnThis","name","getMockName","unknownType","Error","boundFunctionPrefix","bindCall","startsWith","substring","has","test","replace","body","createConstructor","_generateMock","callbacks","refs","mock","refID","slotMetadata","_metadata","setter","getMetadata","component","_refs","Map","size","match","isMockFunction","implementation","spyOn","methodName","accessType","_spyOnProperty","_typeOf","original","isMethodOwner","hasOwnProperty","descriptor","proto","originalGet","propertyName","clearAllMocks","resetAllMocks","restoreAllMocks","JestMock","module","exports"],"mappings":"AAAA;;AAEA,SAASA,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,KAAnC,EAA0C;AACxC,MAAID,GAAG,IAAID,GAAX,EAAgB;AACdG,IAAAA,MAAM,CAACC,cAAP,CAAsBJ,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9BC,MAAAA,KAAK,EAAEA,KADuB;AAE9BG,MAAAA,UAAU,EAAE,IAFkB;AAG9BC,MAAAA,YAAY,EAAE,IAHgB;AAI9BC,MAAAA,QAAQ,EAAE;AAJoB,KAAhC;AAMD,GAPD,MAOO;AACLP,IAAAA,GAAG,CAACC,GAAD,CAAH,GAAWC,KAAX;AACD;;AACD,SAAOF,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,MAAMQ,qBAAqB,GAAG,iBAA9B;AACA,MAAMC,8BAA8B,GAAG,oBAAvC;AACA,MAAMC,8BAA8B,GAAG,IAAIC,MAAJ,CACrCF,8BAA8B,CAACG,MADM,EAErC,GAFqC,CAAvC;AAIA,MAAMC,iBAAiB,GAAG,IAAIC,GAAJ,CAAQ,CAChC,WADgC,EAEhC,OAFgC,EAGhC,OAHgC,EAIhC,MAJgC,EAKhC,OALgC,EAMhC,OANgC,EAOhC,OAPgC,EAQhC,UARgC,EAShC,UATgC,EAUhC,SAVgC,EAWhC,QAXgC,EAYhC,IAZgC,EAahC,MAbgC,EAchC,MAdgC,EAehC,MAfgC,EAgBhC,QAhBgC,EAiBhC,SAjBgC,EAkBhC,OAlBgC,EAmBhC,SAnBgC,EAoBhC,KApBgC,EAqBhC,UArBgC,EAsBhC,IAtBgC,EAuBhC,YAvBgC,EAwBhC,QAxBgC,EAyBhC,IAzBgC,EA0BhC,YA1BgC,EA2BhC,WA3BgC,EA4BhC,KA5BgC,EA6BhC,KA7BgC,EA8BhC,MA9BgC,EA+BhC,SA/BgC,EAgChC,SAhCgC,EAiChC,WAjCgC,EAkChC,QAlCgC,EAmChC,QAnCgC,EAoChC,QApCgC,EAqChC,OArCgC,EAsChC,QAtCgC,EAuChC,MAvCgC,EAwChC,OAxCgC,EAyChC,MAzCgC,EA0ChC,KA1CgC,EA2ChC,QA3CgC,EA4ChC,KA5CgC,EA6ChC,MA7CgC,EA8ChC,OA9CgC,EA+ChC,MA/CgC,EAgDhC,OAhDgC,CAAR,CAA1B;;AAmDA,SAASC,UAAT,CAAoBC,EAApB,EAAwBC,MAAxB,EAAgC;AAC9B,MAAIC,eAAJ;;AAEA,UAAQD,MAAR;AACE,SAAK,CAAL;AACEC,MAAAA,eAAe,GAAG,UAAUC,EAAV,EAAc;AAC9B,eAAOH,EAAE,CAACI,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAP;AACD,OAFD;;AAIA;;AAEF,SAAK,CAAL;AACEH,MAAAA,eAAe,GAAG,UAAUC,EAAV,EAAcG,EAAd,EAAkB;AAClC,eAAON,EAAE,CAACI,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAP;AACD,OAFD;;AAIA;;AAEF,SAAK,CAAL;AACEH,MAAAA,eAAe,GAAG,UAAUC,EAAV,EAAcG,EAAd,EAAkBC,EAAlB,EAAsB;AACtC,eAAOP,EAAE,CAACI,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAP;AACD,OAFD;;AAIA;;AAEF,SAAK,CAAL;AACEH,MAAAA,eAAe,GAAG,UAAUC,EAAV,EAAcG,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0B;AAC1C,eAAOR,EAAE,CAACI,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAP;AACD,OAFD;;AAIA;;AAEF,SAAK,CAAL;AACEH,MAAAA,eAAe,GAAG,UAAUC,EAAV,EAAcG,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8B;AAC9C,eAAOT,EAAE,CAACI,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAP;AACD,OAFD;;AAIA;;AAEF,SAAK,CAAL;AACEH,MAAAA,eAAe,GAAG,UAAUC,EAAV,EAAcG,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkC;AAClD,eAAOV,EAAE,CAACI,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAP;AACD,OAFD;;AAIA;;AAEF,SAAK,CAAL;AACEH,MAAAA,eAAe,GAAG,UAAUC,EAAV,EAAcG,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkCC,EAAlC,EAAsC;AACtD,eAAOX,EAAE,CAACI,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAP;AACD,OAFD;;AAIA;;AAEF,SAAK,CAAL;AACEH,MAAAA,eAAe,GAAG,UAAUC,EAAV,EAAcG,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkCC,EAAlC,EAAsCC,EAAtC,EAA0C;AAC1D,eAAOZ,EAAE,CAACI,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAP;AACD,OAFD;;AAIA;;AAEF,SAAK,CAAL;AACEH,MAAAA,eAAe,GAAG,UAAUC,EAAV,EAAcG,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkCC,EAAlC,EAAsCC,EAAtC,EAA0CC,EAA1C,EAA8C;AAC9D,eAAOb,EAAE,CAACI,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAP;AACD,OAFD;;AAIA;;AAEF;AACEH,MAAAA,eAAe,GAAG,YAAY;AAC5B,eAAOF,EAAE,CAACI,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAP;AACD,OAFD;;AAIA;AArEJ;;AAwEA,SAAOH,eAAP;AACD;;AAED,SAASY,aAAT,CAAuB5B,KAAvB,EAA8B;AAC5B,SAAOC,MAAM,CAAC4B,SAAP,CAAiBC,QAAjB,CAA0BZ,KAA1B,CAAgClB,KAAhC,EAAuC+B,KAAvC,CAA6C,CAA7C,EAAgD,CAAC,CAAjD,CAAP;AACD;;AAED,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,QAAMC,QAAQ,GAAGN,aAAa,CAACK,GAAD,CAA9B;;AAEA,MACEC,QAAQ,KAAK,UAAb,IACAA,QAAQ,KAAK,eADb,IAEAA,QAAQ,KAAK,mBAHf,EAIE;AACA,WAAO,UAAP;AACD,GAND,MAMO,IAAIC,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAJ,EAAwB;AAC7B,WAAO,OAAP;AACD,GAFM,MAEA,IAAIC,QAAQ,KAAK,QAAjB,EAA2B;AAChC,WAAO,QAAP;AACD,GAFM,MAEA,IACLA,QAAQ,KAAK,QAAb,IACAA,QAAQ,KAAK,QADb,IAEAA,QAAQ,KAAK,SAFb,IAGAA,QAAQ,KAAK,QAJR,EAKL;AACA,WAAO,UAAP;AACD,GAPM,MAOA,IACLA,QAAQ,KAAK,KAAb,IACAA,QAAQ,KAAK,SADb,IAEAA,QAAQ,KAAK,KAHR,EAIL;AACA,WAAO,YAAP;AACD,GANM,MAMA,IAAIA,QAAQ,KAAK,QAAjB,EAA2B;AAChC,WAAO,QAAP;AACD,GAFM,MAEA,IAAID,GAAG,KAAKI,SAAZ,EAAuB;AAC5B,WAAO,WAAP;AACD,GAFM,MAEA,IAAIJ,GAAG,KAAK,IAAZ,EAAkB;AACvB,WAAO,MAAP;AACD,GAFM,MAEA;AACL,WAAO,IAAP;AACD;AACF;;AAED,SAASK,cAAT,CAAwBC,MAAxB,EAAgCC,IAAhC,EAAsC;AACpC,MACEA,IAAI,KAAK,WAAT,IACAA,IAAI,KAAK,QADT,IAEAA,IAAI,KAAK,QAFT,IAGAA,IAAI,KAAK,MAHT,IAIAA,IAAI,KAAK,QALX,EAME;AACA,UAAMN,QAAQ,GAAGN,aAAa,CAACW,MAAD,CAA9B;AACA,WACEL,QAAQ,KAAK,UAAb,IACAA,QAAQ,KAAK,eADb,IAEAA,QAAQ,KAAK,mBAHf;AAKD;;AAED,MACEM,IAAI,KAAK,QAAT,IACAA,IAAI,KAAK,QADT,IAEAA,IAAI,KAAK,YAFT,IAGAA,IAAI,KAAK,WAJX,EAKE;AACA,WAAOZ,aAAa,CAACW,MAAD,CAAb,KAA0B,QAAjC;AACD;;AAED,SAAO,KAAP;AACD;;AAED,MAAME,iBAAN,CAAwB;AACtB;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB9C,IAAAA,eAAe,CAAC,IAAD,EAAO,oBAAP,EAA6B,KAAK,CAAlC,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,YAAP,EAAqB,KAAK,CAA1B,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,qBAAP,EAA8B,KAAK,CAAnC,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,WAAP,EAAoB,KAAK,CAAzB,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,wBAAP,EAAiC,KAAK,CAAtC,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,cAAP,EAAuB,KAAK,CAA5B,CAAf;;AAEA,SAAK+C,kBAAL,GAA0BD,MAA1B;AACA,SAAKE,UAAL,GAAkB,IAAIC,OAAJ,EAAlB;AACA,SAAKC,mBAAL,GAA2B,IAAID,OAAJ,EAA3B;AACA,SAAKE,SAAL,GAAiB,IAAIpC,GAAJ,EAAjB;AACA,SAAKqC,YAAL,GAAoBR,iBAApB;AACA,SAAKS,sBAAL,GAA8B,CAA9B;AACD;;AAEDC,EAAAA,SAAS,CAACZ,MAAD,EAAS;AAChB,QAAI,CAACA,MAAL,EAAa;AACX,aAAO,EAAP;AACD;;AAED,UAAMa,KAAK,GAAG,IAAIxC,GAAJ,EAAd;AACA,UAAMyC,cAAc,GAAG,KAAKT,kBAAL,CAAwB3C,MAAxB,CAA+B4B,SAAtD;AACA,UAAMyB,gBAAgB,GAAG,KAAKV,kBAAL,CAAwBW,QAAxB,CAAiC1B,SAA1D;AACA,UAAM2B,cAAc,GAAG,KAAKZ,kBAAL,CAAwBnC,MAAxB,CAA+BoB,SAAtD,CARgB,CAQiD;AACjE;;AAEA,UAAM4B,WAAW,GAAGxD,MAAM,CAAC4B,SAA3B;AACA,UAAM6B,aAAa,GAAGH,QAAQ,CAAC1B,SAA/B;AACA,UAAM8B,WAAW,GAAGlD,MAAM,CAACoB,SAA3B,CAbgB,CAasB;AACtC;;AAEA,WACEU,MAAM,IAAI,IAAV,IACAA,MAAM,KAAKc,cADX,IAEAd,MAAM,KAAKe,gBAFX,IAGAf,MAAM,KAAKiB,cAHX,IAIAjB,MAAM,KAAKkB,WAJX,IAKAlB,MAAM,KAAKmB,aALX,IAMAnB,MAAM,KAAKoB,WAPb,EAQE;AACA,YAAMC,QAAQ,GAAG3D,MAAM,CAAC4D,mBAAP,CAA2BtB,MAA3B,CAAjB;;AAEA,WAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAAC7C,MAA7B,EAAqC+C,CAAC,EAAtC,EAA0C;AACxC,cAAMtB,IAAI,GAAGoB,QAAQ,CAACE,CAAD,CAArB;;AAEA,YAAI,CAACxB,cAAc,CAACC,MAAD,EAASC,IAAT,CAAnB,EAAmC;AACjC,gBAAMuB,QAAQ,GAAG9D,MAAM,CAAC+D,wBAAP,CAAgCzB,MAAhC,EAAwCC,IAAxC,CAAjB;;AAEA,cAAKuB,QAAQ,KAAK1B,SAAb,IAA0B,CAAC0B,QAAQ,CAACE,GAArC,IAA6C1B,MAAM,CAAC2B,UAAxD,EAAoE;AAClEd,YAAAA,KAAK,CAACe,GAAN,CAAU3B,IAAV;AACD;AACF;AACF;;AAEDD,MAAAA,MAAM,GAAGtC,MAAM,CAACmE,cAAP,CAAsB7B,MAAtB,CAAT;AACD;;AAED,WAAOJ,KAAK,CAACkC,IAAN,CAAWjB,KAAX,CAAP;AACD;;AAEDkB,EAAAA,iBAAiB,CAACC,CAAD,EAAI;AACnB,QAAIC,MAAM,GAAG,KAAKzB,mBAAL,CAAyBkB,GAAzB,CAA6BM,CAA7B,CAAb;;AAEA,QAAI,CAACC,MAAL,EAAa;AACXA,MAAAA,MAAM,GAAG,KAAKC,kBAAL,EAAT;;AAEA,WAAK1B,mBAAL,CAAyB2B,GAAzB,CAA6BH,CAA7B,EAAgCC,MAAhC;AACD;;AAED,WAAOA,MAAP;AACD;;AAEDG,EAAAA,gBAAgB,CAACJ,CAAD,EAAI;AAClB,QAAIK,KAAK,GAAG,KAAK/B,UAAL,CAAgBoB,GAAhB,CAAoBM,CAApB,CAAZ;;AAEA,QAAI,CAACK,KAAL,EAAY;AACVA,MAAAA,KAAK,GAAG,KAAKC,iBAAL,EAAR;;AAEA,WAAKhC,UAAL,CAAgB6B,GAAhB,CAAoBH,CAApB,EAAuBK,KAAvB;AACD;;AAED,WAAOA,KAAP;AACD;;AAEDH,EAAAA,kBAAkB,GAAG;AACnB,WAAO;AACLK,MAAAA,QAAQ,EAAEzC,SADL;AAEL0C,MAAAA,QAAQ,EAAE,WAFL;AAGLC,MAAAA,iBAAiB,EAAE,EAHd;AAILC,MAAAA,oBAAoB,EAAE;AAJjB,KAAP;AAMD;;AAEDJ,EAAAA,iBAAiB,GAAG;AAClB,WAAO;AACLK,MAAAA,KAAK,EAAE,EADF;AAELC,MAAAA,SAAS,EAAE,EAFN;AAGLC,MAAAA,mBAAmB,EAAE,EAHhB;AAILC,MAAAA,OAAO,EAAE;AAJJ,KAAP;AAMD;;AAEDC,EAAAA,cAAc,CAACC,QAAD,EAAWC,OAAX,EAAoB;AAChC,QAAID,QAAQ,CAACE,IAAT,KAAkB,QAAtB,EAAgC;AAC9B,aAAO,IAAI,KAAK7C,kBAAL,CAAwB3C,MAA5B,EAAP;AACD,KAFD,MAEO,IAAIsF,QAAQ,CAACE,IAAT,KAAkB,OAAtB,EAA+B;AACpC,aAAO,IAAI,KAAK7C,kBAAL,CAAwBT,KAA5B,EAAP;AACD,KAFM,MAEA,IAAIoD,QAAQ,CAACE,IAAT,KAAkB,QAAtB,EAAgC;AACrC,aAAO,IAAI,KAAK7C,kBAAL,CAAwBnC,MAA5B,CAAmC,EAAnC,CAAP;AACD,KAFM,MAEA,IACL8E,QAAQ,CAACE,IAAT,KAAkB,UAAlB,IACAF,QAAQ,CAACE,IAAT,KAAkB,YADlB,IAEAF,QAAQ,CAACE,IAAT,KAAkB,MAFlB,IAGAF,QAAQ,CAACE,IAAT,KAAkB,WAJb,EAKL;AACA,aAAOF,QAAQ,CAACvF,KAAhB;AACD,KAPM,MAOA,IAAIuF,QAAQ,CAACE,IAAT,KAAkB,UAAtB,EAAkC;AACvC,YAAM5D,SAAS,GACZ0D,QAAQ,CAACG,OAAT,IACCH,QAAQ,CAACG,OAAT,CAAiB7D,SADlB,IAEC0D,QAAQ,CAACG,OAAT,CAAiB7D,SAAjB,CAA2B6D,OAF7B,IAGA,EAJF;;AAMA,YAAMC,cAAc,GAAG,KAAKxC,SAAL,CAAetB,SAAf,CAAvB;;AAEA,YAAM+D,MAAM,GAAG,IAAf;AACA,YAAM5E,eAAe,GAAGH,UAAU,CAAC,UAAU,GAAGgF,IAAb,EAAmB;AACpD,cAAMC,SAAS,GAAGF,MAAM,CAACjB,gBAAP,CAAwBJ,CAAxB,CAAlB;;AAEA,cAAMwB,UAAU,GAAGH,MAAM,CAACtB,iBAAP,CAAyBC,CAAzB,CAAnB;;AAEAuB,QAAAA,SAAS,CAACX,SAAV,CAAoBa,IAApB,CAAyB,IAAzB;AACAF,QAAAA,SAAS,CAACZ,KAAV,CAAgBc,IAAhB,CAAqBH,IAArB,EANoD,CAMxB;AAC5B;AACA;AACA;;AAEA,cAAMI,UAAU,GAAG;AACjBR,UAAAA,IAAI,EAAE,YADW;AAEjBzF,UAAAA,KAAK,EAAEqC;AAFU,SAAnB;AAIAyD,QAAAA,SAAS,CAACT,OAAV,CAAkBW,IAAlB,CAAuBC,UAAvB;AACAH,QAAAA,SAAS,CAACV,mBAAV,CAA8BY,IAA9B,CAAmCJ,MAAM,CAAC1C,sBAAP,EAAnC,EAhBoD,CAgBiB;;AAErE,YAAIgD,gBAAJ,CAlBoD,CAkB9B;;AAEtB,YAAIC,WAAJ,CApBoD,CAoBnC;AACjB;AACA;;AAEA,YAAIC,iBAAiB,GAAG,KAAxB;;AAEA,YAAI;AACF;AACA;AACA;AACA;AACAF,UAAAA,gBAAgB,GAAG,CAAC,MAAM;AACxB,gBAAI,gBAAgB3B,CAApB,EAAuB;AACrB;AACAoB,cAAAA,cAAc,CAACU,OAAf,CAAuBC,IAAI,IAAI;AAC7B;AACA;AACA;AACA,oBAAIzE,SAAS,CAACyE,IAAD,CAAT,CAAgBb,IAAhB,KAAyB,UAA7B,EAAyC;AACvC;AACA,wBAAMc,SAAS,GAAG,KAAKD,IAAL,CAAlB,CAFuC,CAET;;AAE9B,uBAAKA,IAAL,IAAaV,MAAM,CAACY,oBAAP,CAA4B3E,SAAS,CAACyE,IAAD,CAArC,CAAb,CAJuC,CAIoB;;AAE3D,uBAAKA,IAAL,EAAWG,UAAX,GAAwBF,SAAxB;AACD;AACF,eAZD,EAFqB,CAcjB;;AAEJ,oBAAMzB,QAAQ,GAAGiB,UAAU,CAACf,iBAAX,CAA6BjE,MAA7B,GACbgF,UAAU,CAACf,iBAAX,CAA6B0B,KAA7B,EADa,GAEbX,UAAU,CAACjB,QAFf;AAGA,qBAAOA,QAAQ,IAAIA,QAAQ,CAAC5D,KAAT,CAAe,IAAf,EAAqBC,SAArB,CAAnB;AACD,aArBuB,CAqBtB;AACF;;;AAEA,gBAAIwF,gBAAgB,GAAGZ,UAAU,CAACf,iBAAX,CAA6B0B,KAA7B,EAAvB;;AAEA,gBAAIC,gBAAgB,KAAKtE,SAAzB,EAAoC;AAClCsE,cAAAA,gBAAgB,GAAGZ,UAAU,CAACjB,QAA9B;AACD;;AAED,gBAAI6B,gBAAJ,EAAsB;AACpB,qBAAOA,gBAAgB,CAACzF,KAAjB,CAAuB,IAAvB,EAA6BC,SAA7B,CAAP;AACD,aAhCuB,CAgCtB;;;AAEF,gBAAIoD,CAAC,CAACkC,UAAN,EAAkB;AAChB,qBAAOlC,CAAC,CAACkC,UAAF,CAAavF,KAAb,CAAmB,IAAnB,EAAyBC,SAAzB,CAAP;AACD;;AAED,mBAAOkB,SAAP;AACD,WAvCkB,GAAnB;AAwCD,SA7CD,CA6CE,OAAOuE,KAAP,EAAc;AACd;AACAT,UAAAA,WAAW,GAAGS,KAAd;AACAR,UAAAA,iBAAiB,GAAG,IAApB;AACA,gBAAMQ,KAAN;AACD,SAlDD,SAkDU;AACR;AACA;AACA;AACA;AACAX,UAAAA,UAAU,CAACR,IAAX,GAAkBW,iBAAiB,GAAG,OAAH,GAAa,QAAhD;AACAH,UAAAA,UAAU,CAACjG,KAAX,GAAmBoG,iBAAiB,GAAGD,WAAH,GAAiBD,gBAArD;AACD;;AAED,eAAOA,gBAAP;AACD,OAtFiC,EAsF/BX,QAAQ,CAACxE,MAAT,IAAmB,CAtFY,CAAlC;;AAwFA,YAAMwD,CAAC,GAAG,KAAKsC,mBAAL,CAAyBtB,QAAzB,EAAmCvE,eAAnC,CAAV;;AAEAuD,MAAAA,CAAC,CAACuC,eAAF,GAAoB,IAApB;;AAEAvC,MAAAA,CAAC,CAACwC,qBAAF,GAA0B,MAAM,KAAKzC,iBAAL,CAAuBC,CAAvB,EAA0BO,QAA1D;;AAEA,UAAI,OAAOU,OAAP,KAAmB,UAAvB,EAAmC;AACjC,aAAKxC,SAAL,CAAemB,GAAf,CAAmBqB,OAAnB;AACD;;AAED,WAAK3C,UAAL,CAAgB6B,GAAhB,CAAoBH,CAApB,EAAuB,KAAKM,iBAAL,EAAvB;;AAEA,WAAK9B,mBAAL,CAAyB2B,GAAzB,CAA6BH,CAA7B,EAAgC,KAAKE,kBAAL,EAAhC;;AAEAxE,MAAAA,MAAM,CAACC,cAAP,CAAsBqE,CAAtB,EAAyB,MAAzB,EAAiC;AAC/BnE,QAAAA,YAAY,EAAE,KADiB;AAE/BD,QAAAA,UAAU,EAAE,IAFmB;AAG/B8D,QAAAA,GAAG,EAAE,MAAM,KAAKU,gBAAL,CAAsBJ,CAAtB,CAHoB;AAI/BG,QAAAA,GAAG,EAAEsC,GAAG,IAAI,KAAKnE,UAAL,CAAgB6B,GAAhB,CAAoBH,CAApB,EAAuByC,GAAvB;AAJmB,OAAjC;;AAOAzC,MAAAA,CAAC,CAAC0C,SAAF,GAAc,MAAM;AAClB,aAAKpE,UAAL,CAAgBqE,MAAhB,CAAuB3C,CAAvB;;AAEA,eAAOA,CAAP;AACD,OAJD;;AAMAA,MAAAA,CAAC,CAAC4C,SAAF,GAAc,MAAM;AAClB5C,QAAAA,CAAC,CAAC0C,SAAF;;AAEA,aAAKlE,mBAAL,CAAyBmE,MAAzB,CAAgC3C,CAAhC;;AAEA,eAAOA,CAAP;AACD,OAND;;AAQAA,MAAAA,CAAC,CAAC6C,WAAF,GAAgB,MAAM;AACpB7C,QAAAA,CAAC,CAAC4C,SAAF;AACA,eAAO3B,OAAO,GAAGA,OAAO,EAAV,GAAenD,SAA7B;AACD,OAHD;;AAKAkC,MAAAA,CAAC,CAAC8C,mBAAF,GAAwB,CACtBrH,KADsB,CAChB;AADgB,WAEnBuE,CAAC,CAAC+C,sBAAF,CAAyB,MAAMtH,KAA/B,CAFL;;AAIAuE,MAAAA,CAAC,CAACgD,qBAAF,GAA0BvH,KAAK,IAC7BuE,CAAC,CAAC+C,sBAAF,CAAyB,MAAME,OAAO,CAACC,OAAR,CAAgBzH,KAAhB,CAA/B,CADF;;AAGAuE,MAAAA,CAAC,CAACmD,qBAAF,GAA0B1H,KAAK,IAC7BuE,CAAC,CAAC+C,sBAAF,CAAyB,MAAME,OAAO,CAACG,MAAR,CAAe3H,KAAf,CAA/B,CADF;;AAGAuE,MAAAA,CAAC,CAACqD,eAAF,GAAoB,CAClB5H,KADkB,CACZ;AADY,WAEfuE,CAAC,CAACsD,kBAAF,CAAqB,MAAM7H,KAA3B,CAFL;;AAIAuE,MAAAA,CAAC,CAACuD,iBAAF,GAAsB9H,KAAK,IACzBuE,CAAC,CAACsD,kBAAF,CAAqB,MAAML,OAAO,CAACC,OAAR,CAAgBzH,KAAhB,CAA3B,CADF;;AAGAuE,MAAAA,CAAC,CAACwD,iBAAF,GAAsB/H,KAAK,IACzBuE,CAAC,CAACsD,kBAAF,CAAqB,MAAML,OAAO,CAACG,MAAR,CAAe3H,KAAf,CAA3B,CADF;;AAGAuE,MAAAA,CAAC,CAAC+C,sBAAF,GAA2BxG,EAAE,IAAI;AAC/B;AACA;AACA,cAAMiF,UAAU,GAAG,KAAKzB,iBAAL,CAAuBC,CAAvB,CAAnB;;AAEAwB,QAAAA,UAAU,CAACf,iBAAX,CAA6BgB,IAA7B,CAAkClF,EAAlC;AACA,eAAOyD,CAAP;AACD,OAPD;;AASAA,MAAAA,CAAC,CAACsD,kBAAF,GAAuB/G,EAAE,IAAI;AAC3B;AACA,cAAMiF,UAAU,GAAG,KAAKzB,iBAAL,CAAuBC,CAAvB,CAAnB;;AAEAwB,QAAAA,UAAU,CAACjB,QAAX,GAAsBhE,EAAtB;AACA,eAAOyD,CAAP;AACD,OAND;;AAQAA,MAAAA,CAAC,CAACyD,cAAF,GAAmB,MACjBzD,CAAC,CAACsD,kBAAF,CAAqB,YAAY;AAC/B,eAAO,IAAP;AACD,OAFD,CADF;;AAKAtD,MAAAA,CAAC,CAACQ,QAAF,GAAakD,IAAI,IAAI;AACnB,YAAIA,IAAJ,EAAU;AACR,gBAAMlC,UAAU,GAAG,KAAKzB,iBAAL,CAAuBC,CAAvB,CAAnB;;AAEAwB,UAAAA,UAAU,CAAChB,QAAX,GAAsBkD,IAAtB;AACD;;AAED,eAAO1D,CAAP;AACD,OARD;;AAUAA,MAAAA,CAAC,CAAC2D,WAAF,GAAgB,MAAM;AACpB,cAAMnC,UAAU,GAAG,KAAKzB,iBAAL,CAAuBC,CAAvB,CAAnB;;AAEA,eAAOwB,UAAU,CAAChB,QAAX,IAAuB,WAA9B;AACD,OAJD;;AAMA,UAAIQ,QAAQ,CAACT,QAAb,EAAuB;AACrBP,QAAAA,CAAC,CAACsD,kBAAF,CAAqBtC,QAAQ,CAACT,QAA9B;AACD;;AAED,aAAOP,CAAP;AACD,KAzMM,MAyMA;AACL,YAAM4D,WAAW,GAAG5C,QAAQ,CAACE,IAAT,IAAiB,gBAArC;AACA,YAAM,IAAI2C,KAAJ,CAAU,uBAAuBD,WAAjC,CAAN;AACD;AACF;;AAEDtB,EAAAA,mBAAmB,CAACtB,QAAD,EAAWvE,eAAX,EAA4B;AAC7C,QAAIiH,IAAI,GAAG1C,QAAQ,CAAC0C,IAApB;;AAEA,QAAI,CAACA,IAAL,EAAW;AACT,aAAOjH,eAAP;AACD,KAL4C,CAK3C;;;AAEF,UAAMqH,mBAAmB,GAAG,QAA5B;AACA,QAAIC,QAAQ,GAAG,EAAf,CAR6C,CAQ1B;;AAEnB,QAAIL,IAAI,IAAIA,IAAI,CAACM,UAAL,CAAgBF,mBAAhB,CAAZ,EAAkD;AAChD,SAAG;AACDJ,QAAAA,IAAI,GAAGA,IAAI,CAACO,SAAL,CAAeH,mBAAmB,CAACtH,MAAnC,CAAP,CADC,CACkD;;AAEnDuH,QAAAA,QAAQ,GAAG,aAAX;AACD,OAJD,QAISL,IAAI,IAAIA,IAAI,CAACM,UAAL,CAAgBF,mBAAhB,CAJjB;AAKD,KAhB4C,CAgB3C;AACF;;;AAEA,QAAIJ,IAAI,KAAK3H,qBAAb,EAAoC;AAClC,aAAOU,eAAP;AACD;;AAED,SACE;AACA;AACAL,IAAAA,iBAAiB,CAAC8H,GAAlB,CAAsBR,IAAtB,KAA+B;AAC/B,UAAMS,IAAN,CAAWT,IAAX,CAJF,EAKE;AACAA,MAAAA,IAAI,GAAG,MAAMA,IAAb;AACD,KA9B4C,CA8B3C;AACF;;;AAEA,QAAI1H,8BAA8B,CAACmI,IAA/B,CAAoCT,IAApC,CAAJ,EAA+C;AAC7CA,MAAAA,IAAI,GAAGA,IAAI,CAACU,OAAL,CAAanI,8BAAb,EAA6C,GAA7C,CAAP;AACD;;AAED,UAAMoI,IAAI,GACR,qBACAX,IADA,GAEA,MAFA,GAGA,SAHA,GAIA3H,qBAJA,GAKA,yBALA,GAMA,GANA,GAOAgI,QARF;AASA,UAAMO,iBAAiB,GAAG,IAAI,KAAKjG,kBAAL,CAAwBW,QAA5B,CACxBjD,qBADwB,EAExBsI,IAFwB,CAA1B;AAIA,WAAOC,iBAAiB,CAAC7H,eAAD,CAAxB;AACD;;AAED8H,EAAAA,aAAa,CAACvD,QAAD,EAAWwD,SAAX,EAAsBC,IAAtB,EAA4B;AACvC;AACA;AACA;AACA,UAAMC,IAAI,GAAG,KAAK3D,cAAL,CAAoBC,QAApB,CAAb;;AAEA,QAAIA,QAAQ,CAAC2D,KAAT,IAAkB,IAAtB,EAA4B;AAC1BF,MAAAA,IAAI,CAACzD,QAAQ,CAAC2D,KAAV,CAAJ,GAAuBD,IAAvB;AACD;;AAED,SAAK9F,SAAL,CAAeoC,QAAQ,CAACG,OAAxB,EAAiCW,OAAjC,CAAyCC,IAAI,IAAI;AAC/C,YAAM6C,YAAY,GAAI5D,QAAQ,CAACG,OAAT,IAAoBH,QAAQ,CAACG,OAAT,CAAiBY,IAAjB,CAArB,IAAgD,EAArE;;AAEA,UAAI6C,YAAY,CAAClH,GAAb,IAAoB,IAAxB,EAA8B;AAC5B8G,QAAAA,SAAS,CAAC/C,IAAV,CACG,UAAU/D,GAAV,EAAe;AACd,iBAAO,MAAOgH,IAAI,CAAC3C,IAAD,CAAJ,GAAa0C,IAAI,CAAC/G,GAAD,CAA/B;AACD,SAFD,CAEGkH,YAAY,CAAClH,GAFhB,CADF;AAKD,OAND,MAMO;AACLgH,QAAAA,IAAI,CAAC3C,IAAD,CAAJ,GAAa,KAAKwC,aAAL,CAAmBK,YAAnB,EAAiCJ,SAAjC,EAA4CC,IAA5C,CAAb;AACD;AACF,KAZD;;AAcA,QACEzD,QAAQ,CAACE,IAAT,KAAkB,WAAlB,IACAF,QAAQ,CAACE,IAAT,KAAkB,MADlB,IAEAwD,IAAI,CAACpH,SAFL,IAGA,OAAOoH,IAAI,CAACpH,SAAZ,KAA0B,QAJ5B,EAKE;AACAoH,MAAAA,IAAI,CAACpH,SAAL,CAAea,WAAf,GAA6BuG,IAA7B;AACD;;AAED,WAAOA,IAAP;AACD;AACD;AACF;AACA;AACA;AACA;;;AAEEzC,EAAAA,oBAAoB,CAAC4C,SAAD,EAAY;AAC9B,UAAML,SAAS,GAAG,EAAlB;AACA,UAAMC,IAAI,GAAG,EAAb;;AAEA,UAAMC,IAAI,GAAG,KAAKH,aAAL,CAAmBM,SAAnB,EAA8BL,SAA9B,EAAyCC,IAAzC,CAAb;;AAEAD,IAAAA,SAAS,CAAC1C,OAAV,CAAkBgD,MAAM,IAAIA,MAAM,EAAlC;AACA,WAAOJ,IAAP;AACD;AACD;AACF;AACA;AACA;;;AAEEK,EAAAA,WAAW,CAACC,SAAD,EAAYC,KAAZ,EAAmB;AAC5B,UAAMR,IAAI,GAAGQ,KAAK,IAAI,IAAIC,GAAJ,EAAtB;AACA,UAAMxH,GAAG,GAAG+G,IAAI,CAAC/E,GAAL,CAASsF,SAAT,CAAZ;;AAEA,QAAItH,GAAG,IAAI,IAAX,EAAiB;AACf,aAAO;AACLA,QAAAA;AADK,OAAP;AAGD;;AAED,UAAMwD,IAAI,GAAGzD,OAAO,CAACuH,SAAD,CAApB;;AAEA,QAAI,CAAC9D,IAAL,EAAW;AACT,aAAO,IAAP;AACD;;AAED,UAAMF,QAAQ,GAAG;AACfE,MAAAA;AADe,KAAjB;;AAIA,QACEA,IAAI,KAAK,UAAT,IACAA,IAAI,KAAK,YADT,IAEAA,IAAI,KAAK,WAFT,IAGAA,IAAI,KAAK,MAJX,EAKE;AACAF,MAAAA,QAAQ,CAACvF,KAAT,GAAiBuJ,SAAjB;AACA,aAAOhE,QAAP;AACD,KARD,MAQO,IAAIE,IAAI,KAAK,UAAb,EAAyB;AAC9B;AACAF,MAAAA,QAAQ,CAAC0C,IAAT,GAAgBsB,SAAS,CAACtB,IAA1B,CAF8B,CAEE;;AAEhC,UAAIsB,SAAS,CAACzC,eAAV,KAA8B,IAAlC,EAAwC;AACtC;AACAvB,QAAAA,QAAQ,CAACT,QAAT,GAAoByE,SAAS,CAACxC,qBAAV,EAApB;AACD;AACF;;AAEDxB,IAAAA,QAAQ,CAAC2D,KAAT,GAAiBF,IAAI,CAACU,IAAtB;AACAV,IAAAA,IAAI,CAACtE,GAAL,CAAS6E,SAAT,EAAoBhE,QAAQ,CAAC2D,KAA7B;AACA,QAAIxD,OAAO,GAAG,IAAd,CAxC4B,CAwCR;;AAEpB,QAAID,IAAI,KAAK,OAAb,EAAsB;AACpB,WAAKtC,SAAL,CAAeoG,SAAf,EAA0BlD,OAA1B,CAAkCC,IAAI,IAAI;AACxC,YACEb,IAAI,KAAK,UAAT,IAAuB;AACvB8D,QAAAA,SAAS,CAACzC,eAAV,KAA8B,IAD9B,IAEAR,IAAI,CAACqD,KAAL,CAAW,OAAX,CAHF,EAIE;AACA;AACD,SAPuC,CAOtC;;;AAEF,cAAMR,YAAY,GAAG,KAAKG,WAAL,CAAiBC,SAAS,CAACjD,IAAD,CAA1B,EAAkC0C,IAAlC,CAArB;;AAEA,YAAIG,YAAJ,EAAkB;AAChB,cAAI,CAACzD,OAAL,EAAc;AACZA,YAAAA,OAAO,GAAG,EAAV;AACD;;AAEDA,UAAAA,OAAO,CAACY,IAAD,CAAP,GAAgB6C,YAAhB;AACD;AACF,OAlBD;AAmBD;;AAED,QAAIzD,OAAJ,EAAa;AACXH,MAAAA,QAAQ,CAACG,OAAT,GAAmBA,OAAnB;AACD;;AAED,WAAOH,QAAP;AACD;;AAEDqE,EAAAA,cAAc,CAAC9I,EAAD,EAAK;AACjB,WAAO,CAAC,CAACA,EAAF,IAAQA,EAAE,CAACgG,eAAH,KAAuB,IAAtC;AACD;;AAEDhG,EAAAA,EAAE,CAAC+I,cAAD,EAAiB;AACjB,UAAM9I,MAAM,GAAG8I,cAAc,GAAGA,cAAc,CAAC9I,MAAlB,GAA2B,CAAxD;;AAEA,UAAMD,EAAE,GAAG,KAAKwE,cAAL,CAAoB;AAC7BvE,MAAAA,MAD6B;AAE7B0E,MAAAA,IAAI,EAAE;AAFuB,KAApB,CAAX;;AAKA,QAAIoE,cAAJ,EAAoB;AAClB/I,MAAAA,EAAE,CAAC+G,kBAAH,CAAsBgC,cAAtB;AACD;;AAED,WAAO/I,EAAP;AACD;;AAEDgJ,EAAAA,KAAK,CAACvH,MAAD,EAASwH,UAAT,EAAqBC,UAArB,EAAiC;AACpC,QAAIA,UAAJ,EAAgB;AACd,aAAO,KAAKC,cAAL,CAAoB1H,MAApB,EAA4BwH,UAA5B,EAAwCC,UAAxC,CAAP;AACD;;AAED,QAAI,OAAOzH,MAAP,KAAkB,QAAlB,IAA8B,OAAOA,MAAP,KAAkB,UAApD,EAAgE;AAC9D,YAAM,IAAI6F,KAAJ,CACJ,wCAAwC,KAAK8B,OAAL,CAAa3H,MAAb,CAAxC,GAA+D,QAD3D,CAAN;AAGD;;AAED,UAAM4H,QAAQ,GAAG5H,MAAM,CAACwH,UAAD,CAAvB;;AAEA,QAAI,CAAC,KAAKH,cAAL,CAAoBO,QAApB,CAAL,EAAoC;AAClC,UAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC,cAAM,IAAI/B,KAAJ,CACJ,oBACE2B,UADF,GAEE,0CAFF,GAGE,KAAKG,OAAL,CAAaC,QAAb,CAHF,GAIE,gBALE,CAAN;AAOD;;AAED,YAAMC,aAAa,GAAG7H,MAAM,CAAC8H,cAAP,CAAsBN,UAAtB,CAAtB;AACA,UAAIO,UAAU,GAAGrK,MAAM,CAAC+D,wBAAP,CAAgCzB,MAAhC,EAAwCwH,UAAxC,CAAjB;AACA,UAAIQ,KAAK,GAAGtK,MAAM,CAACmE,cAAP,CAAsB7B,MAAtB,CAAZ;;AAEA,aAAO,CAAC+H,UAAD,IAAeC,KAAK,KAAK,IAAhC,EAAsC;AACpCD,QAAAA,UAAU,GAAGrK,MAAM,CAAC+D,wBAAP,CAAgCuG,KAAhC,EAAuCR,UAAvC,CAAb;AACAQ,QAAAA,KAAK,GAAGtK,MAAM,CAACmE,cAAP,CAAsBmG,KAAtB,CAAR;AACD;;AAED,UAAItB,IAAJ;;AAEA,UAAIqB,UAAU,IAAIA,UAAU,CAACrG,GAA7B,EAAkC;AAChC,cAAMuG,WAAW,GAAGF,UAAU,CAACrG,GAA/B;AACAgF,QAAAA,IAAI,GAAG,KAAK3D,cAAL,CACL;AACEG,UAAAA,IAAI,EAAE;AADR,SADK,EAIL,MAAM;AACJ6E,UAAAA,UAAU,CAACrG,GAAX,GAAiBuG,WAAjB;AACAvK,UAAAA,MAAM,CAACC,cAAP,CAAsBqC,MAAtB,EAA8BwH,UAA9B,EAA0CO,UAA1C;AACD,SAPI,CAAP;;AAUAA,QAAAA,UAAU,CAACrG,GAAX,GAAiB,MAAMgF,IAAvB;;AAEAhJ,QAAAA,MAAM,CAACC,cAAP,CAAsBqC,MAAtB,EAA8BwH,UAA9B,EAA0CO,UAA1C;AACD,OAfD,MAeO;AACLrB,QAAAA,IAAI,GAAG,KAAK3D,cAAL,CACL;AACEG,UAAAA,IAAI,EAAE;AADR,SADK,EAIL,MAAM;AACJ,cAAI2E,aAAJ,EAAmB;AACjB7H,YAAAA,MAAM,CAACwH,UAAD,CAAN,GAAqBI,QAArB;AACD,WAFD,MAEO;AACL,mBAAO5H,MAAM,CAACwH,UAAD,CAAb;AACD;AACF,SAVI,CAAP,CADK,CAYF;;AAEHxH,QAAAA,MAAM,CAACwH,UAAD,CAAN,GAAqBd,IAArB;AACD;;AAEDA,MAAAA,IAAI,CAACpB,kBAAL,CAAwB,YAAY;AAClC,eAAOsC,QAAQ,CAACjJ,KAAT,CAAe,IAAf,EAAqBC,SAArB,CAAP;AACD,OAFD;AAGD;;AAED,WAAOoB,MAAM,CAACwH,UAAD,CAAb;AACD;;AAEDE,EAAAA,cAAc,CAACnK,GAAD,EAAM2K,YAAN,EAAoBT,UAAU,GAAG,KAAjC,EAAwC;AACpD,QAAI,OAAOlK,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,UAA9C,EAA0D;AACxD,YAAM,IAAIsI,KAAJ,CACJ,wCAAwC,KAAK8B,OAAL,CAAapK,GAAb,CAAxC,GAA4D,QADxD,CAAN;AAGD;;AAED,QAAI,CAACA,GAAL,EAAU;AACR,YAAM,IAAIsI,KAAJ,CACJ,oDAAoDqC,YAApD,GAAmE,EAD/D,CAAN;AAGD;;AAED,QAAI,CAACA,YAAL,EAAmB;AACjB,YAAM,IAAIrC,KAAJ,CAAU,2BAAV,CAAN;AACD;;AAED,QAAIkC,UAAU,GAAGrK,MAAM,CAAC+D,wBAAP,CAAgClE,GAAhC,EAAqC2K,YAArC,CAAjB;AACA,QAAIF,KAAK,GAAGtK,MAAM,CAACmE,cAAP,CAAsBtE,GAAtB,CAAZ;;AAEA,WAAO,CAACwK,UAAD,IAAeC,KAAK,KAAK,IAAhC,EAAsC;AACpCD,MAAAA,UAAU,GAAGrK,MAAM,CAAC+D,wBAAP,CAAgCuG,KAAhC,EAAuCE,YAAvC,CAAb;AACAF,MAAAA,KAAK,GAAGtK,MAAM,CAACmE,cAAP,CAAsBmG,KAAtB,CAAR;AACD;;AAED,QAAI,CAACD,UAAL,EAAiB;AACf,YAAM,IAAIlC,KAAJ,CAAUqC,YAAY,GAAG,0BAAzB,CAAN;AACD;;AAED,QAAI,CAACH,UAAU,CAAClK,YAAhB,EAA8B;AAC5B,YAAM,IAAIgI,KAAJ,CAAUqC,YAAY,GAAG,+BAAzB,CAAN;AACD;;AAED,QAAI,CAACH,UAAU,CAACN,UAAD,CAAf,EAA6B;AAC3B,YAAM,IAAI5B,KAAJ,CACJ,cAAcqC,YAAd,GAA6B,6BAA7B,GAA6DT,UADzD,CAAN;AAGD;;AAED,UAAMG,QAAQ,GAAGG,UAAU,CAACN,UAAD,CAA3B;;AAEA,QAAI,CAAC,KAAKJ,cAAL,CAAoBO,QAApB,CAAL,EAAoC;AAClC,UAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC,cAAM,IAAI/B,KAAJ,CACJ,oBACEqC,YADF,GAEE,0CAFF,GAGE,KAAKP,OAAL,CAAaC,QAAb,CAHF,GAIE,gBALE,CAAN;AAOD,OATiC,CAShC;;;AAEFG,MAAAA,UAAU,CAACN,UAAD,CAAV,GAAyB,KAAK1E,cAAL,CACvB;AACEG,QAAAA,IAAI,EAAE;AADR,OADuB,EAIvB,MAAM;AACJ;AACA6E,QAAAA,UAAU,CAACN,UAAD,CAAV,GAAyBG,QAAzB;AACAlK,QAAAA,MAAM,CAACC,cAAP,CAAsBJ,GAAtB,EAA2B2K,YAA3B,EAAyCH,UAAzC;AACD,OARsB,CAAzB;AAUAA,MAAAA,UAAU,CAACN,UAAD,CAAV,CAAuBnC,kBAAvB,CAA0C,YAAY;AACpD;AACA,eAAOsC,QAAQ,CAACjJ,KAAT,CAAe,IAAf,EAAqBC,SAArB,CAAP;AACD,OAHD;AAID;;AAEDlB,IAAAA,MAAM,CAACC,cAAP,CAAsBJ,GAAtB,EAA2B2K,YAA3B,EAAyCH,UAAzC;AACA,WAAOA,UAAU,CAACN,UAAD,CAAjB;AACD;;AAEDU,EAAAA,aAAa,GAAG;AACd,SAAK7H,UAAL,GAAkB,IAAIC,OAAJ,EAAlB;AACD;;AAED6H,EAAAA,aAAa,GAAG;AACd,SAAK5H,mBAAL,GAA2B,IAAID,OAAJ,EAA3B;AACA,SAAKD,UAAL,GAAkB,IAAIC,OAAJ,EAAlB;AACD;;AAED8H,EAAAA,eAAe,GAAG;AAChB,SAAK5H,SAAL,CAAeqD,OAAf,CAAuBb,OAAO,IAAIA,OAAO,EAAzC;;AAEA,SAAKxC,SAAL,GAAiB,IAAIpC,GAAJ,EAAjB;AACD;;AAEDsJ,EAAAA,OAAO,CAAClK,KAAD,EAAQ;AACb,WAAOA,KAAK,IAAI,IAAT,GAAgB,KAAKA,KAArB,GAA6B,OAAOA,KAA3C;AACD;;AAzrBqB;;AA4rBxB,MAAM6K,QAAQ,GAAG,IAAIpI,iBAAJ,CAAsBE,MAAtB,CAAjB;AACAmI,MAAM,CAACC,OAAP,GAAiBF,QAAjB","sourcesContent":["'use strict';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable local/ban-types-eventually, local/prefer-rest-params-eventually */\n// | Window â€“ add once TS improves typings;\n\n/**\n * Possible types of a MockFunctionResult.\n * 'return': The call completed by returning normally.\n * 'throw': The call completed by throwing a value.\n * 'incomplete': The call has not completed yet. This is possible if you read\n *               the  mock function result from within the mock function itself\n *               (or a function called by the mock function).\n */\n\n/**\n * Represents the result of a single call to a mock function.\n */\n// see https://github.com/Microsoft/TypeScript/issues/25215\nconst MOCK_CONSTRUCTOR_NAME = 'mockConstructor';\nconst FUNCTION_NAME_RESERVED_PATTERN = /[\\s!-\\/:-@\\[-`{-~]/;\nconst FUNCTION_NAME_RESERVED_REPLACE = new RegExp(\n  FUNCTION_NAME_RESERVED_PATTERN.source,\n  'g'\n);\nconst RESERVED_KEYWORDS = new Set([\n  'arguments',\n  'await',\n  'break',\n  'case',\n  'catch',\n  'class',\n  'const',\n  'continue',\n  'debugger',\n  'default',\n  'delete',\n  'do',\n  'else',\n  'enum',\n  'eval',\n  'export',\n  'extends',\n  'false',\n  'finally',\n  'for',\n  'function',\n  'if',\n  'implements',\n  'import',\n  'in',\n  'instanceof',\n  'interface',\n  'let',\n  'new',\n  'null',\n  'package',\n  'private',\n  'protected',\n  'public',\n  'return',\n  'static',\n  'super',\n  'switch',\n  'this',\n  'throw',\n  'true',\n  'try',\n  'typeof',\n  'var',\n  'void',\n  'while',\n  'with',\n  'yield'\n]);\n\nfunction matchArity(fn, length) {\n  let mockConstructor;\n\n  switch (length) {\n    case 1:\n      mockConstructor = function (_a) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 2:\n      mockConstructor = function (_a, _b) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 3:\n      mockConstructor = function (_a, _b, _c) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 4:\n      mockConstructor = function (_a, _b, _c, _d) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 5:\n      mockConstructor = function (_a, _b, _c, _d, _e) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 6:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 7:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 8:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g, _h) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 9:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g, _h, _i) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    default:\n      mockConstructor = function () {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n  }\n\n  return mockConstructor;\n}\n\nfunction getObjectType(value) {\n  return Object.prototype.toString.apply(value).slice(8, -1);\n}\n\nfunction getType(ref) {\n  const typeName = getObjectType(ref);\n\n  if (\n    typeName === 'Function' ||\n    typeName === 'AsyncFunction' ||\n    typeName === 'GeneratorFunction'\n  ) {\n    return 'function';\n  } else if (Array.isArray(ref)) {\n    return 'array';\n  } else if (typeName === 'Object') {\n    return 'object';\n  } else if (\n    typeName === 'Number' ||\n    typeName === 'String' ||\n    typeName === 'Boolean' ||\n    typeName === 'Symbol'\n  ) {\n    return 'constant';\n  } else if (\n    typeName === 'Map' ||\n    typeName === 'WeakMap' ||\n    typeName === 'Set'\n  ) {\n    return 'collection';\n  } else if (typeName === 'RegExp') {\n    return 'regexp';\n  } else if (ref === undefined) {\n    return 'undefined';\n  } else if (ref === null) {\n    return 'null';\n  } else {\n    return null;\n  }\n}\n\nfunction isReadonlyProp(object, prop) {\n  if (\n    prop === 'arguments' ||\n    prop === 'caller' ||\n    prop === 'callee' ||\n    prop === 'name' ||\n    prop === 'length'\n  ) {\n    const typeName = getObjectType(object);\n    return (\n      typeName === 'Function' ||\n      typeName === 'AsyncFunction' ||\n      typeName === 'GeneratorFunction'\n    );\n  }\n\n  if (\n    prop === 'source' ||\n    prop === 'global' ||\n    prop === 'ignoreCase' ||\n    prop === 'multiline'\n  ) {\n    return getObjectType(object) === 'RegExp';\n  }\n\n  return false;\n}\n\nclass ModuleMockerClass {\n  /**\n   * @see README.md\n   * @param global Global object of the test environment, used to create\n   * mocks\n   */\n  constructor(global) {\n    _defineProperty(this, '_environmentGlobal', void 0);\n\n    _defineProperty(this, '_mockState', void 0);\n\n    _defineProperty(this, '_mockConfigRegistry', void 0);\n\n    _defineProperty(this, '_spyState', void 0);\n\n    _defineProperty(this, '_invocationCallCounter', void 0);\n\n    _defineProperty(this, 'ModuleMocker', void 0);\n\n    this._environmentGlobal = global;\n    this._mockState = new WeakMap();\n    this._mockConfigRegistry = new WeakMap();\n    this._spyState = new Set();\n    this.ModuleMocker = ModuleMockerClass;\n    this._invocationCallCounter = 1;\n  }\n\n  _getSlots(object) {\n    if (!object) {\n      return [];\n    }\n\n    const slots = new Set();\n    const EnvObjectProto = this._environmentGlobal.Object.prototype;\n    const EnvFunctionProto = this._environmentGlobal.Function.prototype;\n    const EnvRegExpProto = this._environmentGlobal.RegExp.prototype; // Also check the builtins in the current context as they leak through\n    // core node modules.\n\n    const ObjectProto = Object.prototype;\n    const FunctionProto = Function.prototype;\n    const RegExpProto = RegExp.prototype; // Properties of Object.prototype, Function.prototype and RegExp.prototype\n    // are never reported as slots\n\n    while (\n      object != null &&\n      object !== EnvObjectProto &&\n      object !== EnvFunctionProto &&\n      object !== EnvRegExpProto &&\n      object !== ObjectProto &&\n      object !== FunctionProto &&\n      object !== RegExpProto\n    ) {\n      const ownNames = Object.getOwnPropertyNames(object);\n\n      for (let i = 0; i < ownNames.length; i++) {\n        const prop = ownNames[i];\n\n        if (!isReadonlyProp(object, prop)) {\n          const propDesc = Object.getOwnPropertyDescriptor(object, prop);\n\n          if ((propDesc !== undefined && !propDesc.get) || object.__esModule) {\n            slots.add(prop);\n          }\n        }\n      }\n\n      object = Object.getPrototypeOf(object);\n    }\n\n    return Array.from(slots);\n  }\n\n  _ensureMockConfig(f) {\n    let config = this._mockConfigRegistry.get(f);\n\n    if (!config) {\n      config = this._defaultMockConfig();\n\n      this._mockConfigRegistry.set(f, config);\n    }\n\n    return config;\n  }\n\n  _ensureMockState(f) {\n    let state = this._mockState.get(f);\n\n    if (!state) {\n      state = this._defaultMockState();\n\n      this._mockState.set(f, state);\n    }\n\n    return state;\n  }\n\n  _defaultMockConfig() {\n    return {\n      mockImpl: undefined,\n      mockName: 'jest.fn()',\n      specificMockImpls: [],\n      specificReturnValues: []\n    };\n  }\n\n  _defaultMockState() {\n    return {\n      calls: [],\n      instances: [],\n      invocationCallOrder: [],\n      results: []\n    };\n  }\n\n  _makeComponent(metadata, restore) {\n    if (metadata.type === 'object') {\n      return new this._environmentGlobal.Object();\n    } else if (metadata.type === 'array') {\n      return new this._environmentGlobal.Array();\n    } else if (metadata.type === 'regexp') {\n      return new this._environmentGlobal.RegExp('');\n    } else if (\n      metadata.type === 'constant' ||\n      metadata.type === 'collection' ||\n      metadata.type === 'null' ||\n      metadata.type === 'undefined'\n    ) {\n      return metadata.value;\n    } else if (metadata.type === 'function') {\n      const prototype =\n        (metadata.members &&\n          metadata.members.prototype &&\n          metadata.members.prototype.members) ||\n        {};\n\n      const prototypeSlots = this._getSlots(prototype);\n\n      const mocker = this;\n      const mockConstructor = matchArity(function (...args) {\n        const mockState = mocker._ensureMockState(f);\n\n        const mockConfig = mocker._ensureMockConfig(f);\n\n        mockState.instances.push(this);\n        mockState.calls.push(args); // Create and record an \"incomplete\" mock result immediately upon\n        // calling rather than waiting for the mock to return. This avoids\n        // issues caused by recursion where results can be recorded in the\n        // wrong order.\n\n        const mockResult = {\n          type: 'incomplete',\n          value: undefined\n        };\n        mockState.results.push(mockResult);\n        mockState.invocationCallOrder.push(mocker._invocationCallCounter++); // Will be set to the return value of the mock if an error is not thrown\n\n        let finalReturnValue; // Will be set to the error that is thrown by the mock (if it throws)\n\n        let thrownError; // Will be set to true if the mock throws an error. The presence of a\n        // value in `thrownError` is not a 100% reliable indicator because a\n        // function could throw a value of undefined.\n\n        let callDidThrowError = false;\n\n        try {\n          // The bulk of the implementation is wrapped in an immediately\n          // executed arrow function so the return value of the mock function\n          // can be easily captured and recorded, despite the many separate\n          // return points within the logic.\n          finalReturnValue = (() => {\n            if (this instanceof f) {\n              // This is probably being called as a constructor\n              prototypeSlots.forEach(slot => {\n                // Copy prototype methods to the instance to make\n                // it easier to interact with mock instance call and\n                // return values\n                if (prototype[slot].type === 'function') {\n                  // @ts-expect-error no index signature\n                  const protoImpl = this[slot]; // @ts-expect-error no index signature\n\n                  this[slot] = mocker.generateFromMetadata(prototype[slot]); // @ts-expect-error no index signature\n\n                  this[slot]._protoImpl = protoImpl;\n                }\n              }); // Run the mock constructor implementation\n\n              const mockImpl = mockConfig.specificMockImpls.length\n                ? mockConfig.specificMockImpls.shift()\n                : mockConfig.mockImpl;\n              return mockImpl && mockImpl.apply(this, arguments);\n            } // If mockImplementationOnce()/mockImplementation() is last set,\n            // implementation use the mock\n\n            let specificMockImpl = mockConfig.specificMockImpls.shift();\n\n            if (specificMockImpl === undefined) {\n              specificMockImpl = mockConfig.mockImpl;\n            }\n\n            if (specificMockImpl) {\n              return specificMockImpl.apply(this, arguments);\n            } // Otherwise use prototype implementation\n\n            if (f._protoImpl) {\n              return f._protoImpl.apply(this, arguments);\n            }\n\n            return undefined;\n          })();\n        } catch (error) {\n          // Store the thrown error so we can record it, then re-throw it.\n          thrownError = error;\n          callDidThrowError = true;\n          throw error;\n        } finally {\n          // Record the result of the function.\n          // NOTE: Intentionally NOT pushing/indexing into the array of mock\n          //       results here to avoid corrupting results data if mockClear()\n          //       is called during the execution of the mock.\n          mockResult.type = callDidThrowError ? 'throw' : 'return';\n          mockResult.value = callDidThrowError ? thrownError : finalReturnValue;\n        }\n\n        return finalReturnValue;\n      }, metadata.length || 0);\n\n      const f = this._createMockFunction(metadata, mockConstructor);\n\n      f._isMockFunction = true;\n\n      f.getMockImplementation = () => this._ensureMockConfig(f).mockImpl;\n\n      if (typeof restore === 'function') {\n        this._spyState.add(restore);\n      }\n\n      this._mockState.set(f, this._defaultMockState());\n\n      this._mockConfigRegistry.set(f, this._defaultMockConfig());\n\n      Object.defineProperty(f, 'mock', {\n        configurable: false,\n        enumerable: true,\n        get: () => this._ensureMockState(f),\n        set: val => this._mockState.set(f, val)\n      });\n\n      f.mockClear = () => {\n        this._mockState.delete(f);\n\n        return f;\n      };\n\n      f.mockReset = () => {\n        f.mockClear();\n\n        this._mockConfigRegistry.delete(f);\n\n        return f;\n      };\n\n      f.mockRestore = () => {\n        f.mockReset();\n        return restore ? restore() : undefined;\n      };\n\n      f.mockReturnValueOnce = (\n        value // next function call will return this value or default return value\n      ) => f.mockImplementationOnce(() => value);\n\n      f.mockResolvedValueOnce = value =>\n        f.mockImplementationOnce(() => Promise.resolve(value));\n\n      f.mockRejectedValueOnce = value =>\n        f.mockImplementationOnce(() => Promise.reject(value));\n\n      f.mockReturnValue = (\n        value // next function call will return specified return value or this one\n      ) => f.mockImplementation(() => value);\n\n      f.mockResolvedValue = value =>\n        f.mockImplementation(() => Promise.resolve(value));\n\n      f.mockRejectedValue = value =>\n        f.mockImplementation(() => Promise.reject(value));\n\n      f.mockImplementationOnce = fn => {\n        // next function call will use this mock implementation return value\n        // or default mock implementation return value\n        const mockConfig = this._ensureMockConfig(f);\n\n        mockConfig.specificMockImpls.push(fn);\n        return f;\n      };\n\n      f.mockImplementation = fn => {\n        // next function call will use mock implementation return value\n        const mockConfig = this._ensureMockConfig(f);\n\n        mockConfig.mockImpl = fn;\n        return f;\n      };\n\n      f.mockReturnThis = () =>\n        f.mockImplementation(function () {\n          return this;\n        });\n\n      f.mockName = name => {\n        if (name) {\n          const mockConfig = this._ensureMockConfig(f);\n\n          mockConfig.mockName = name;\n        }\n\n        return f;\n      };\n\n      f.getMockName = () => {\n        const mockConfig = this._ensureMockConfig(f);\n\n        return mockConfig.mockName || 'jest.fn()';\n      };\n\n      if (metadata.mockImpl) {\n        f.mockImplementation(metadata.mockImpl);\n      }\n\n      return f;\n    } else {\n      const unknownType = metadata.type || 'undefined type';\n      throw new Error('Unrecognized type ' + unknownType);\n    }\n  }\n\n  _createMockFunction(metadata, mockConstructor) {\n    let name = metadata.name;\n\n    if (!name) {\n      return mockConstructor;\n    } // Preserve `name` property of mocked function.\n\n    const boundFunctionPrefix = 'bound ';\n    let bindCall = ''; // if-do-while for perf reasons. The common case is for the if to fail.\n\n    if (name && name.startsWith(boundFunctionPrefix)) {\n      do {\n        name = name.substring(boundFunctionPrefix.length); // Call bind() just to alter the function name.\n\n        bindCall = '.bind(null)';\n      } while (name && name.startsWith(boundFunctionPrefix));\n    } // Special case functions named `mockConstructor` to guard for infinite\n    // loops.\n\n    if (name === MOCK_CONSTRUCTOR_NAME) {\n      return mockConstructor;\n    }\n\n    if (\n      // It's a syntax error to define functions with a reserved keyword\n      // as name.\n      RESERVED_KEYWORDS.has(name) || // It's also a syntax error to define functions with a name that starts with a number\n      /^\\d/.test(name)\n    ) {\n      name = '$' + name;\n    } // It's also a syntax error to define a function with a reserved character\n    // as part of it's name.\n\n    if (FUNCTION_NAME_RESERVED_PATTERN.test(name)) {\n      name = name.replace(FUNCTION_NAME_RESERVED_REPLACE, '$');\n    }\n\n    const body =\n      'return function ' +\n      name +\n      '() {' +\n      'return ' +\n      MOCK_CONSTRUCTOR_NAME +\n      '.apply(this,arguments);' +\n      '}' +\n      bindCall;\n    const createConstructor = new this._environmentGlobal.Function(\n      MOCK_CONSTRUCTOR_NAME,\n      body\n    );\n    return createConstructor(mockConstructor);\n  }\n\n  _generateMock(metadata, callbacks, refs) {\n    // metadata not compatible but it's the same type, maybe problem with\n    // overloading of _makeComponent and not _generateMock?\n    // @ts-expect-error\n    const mock = this._makeComponent(metadata);\n\n    if (metadata.refID != null) {\n      refs[metadata.refID] = mock;\n    }\n\n    this._getSlots(metadata.members).forEach(slot => {\n      const slotMetadata = (metadata.members && metadata.members[slot]) || {};\n\n      if (slotMetadata.ref != null) {\n        callbacks.push(\n          (function (ref) {\n            return () => (mock[slot] = refs[ref]);\n          })(slotMetadata.ref)\n        );\n      } else {\n        mock[slot] = this._generateMock(slotMetadata, callbacks, refs);\n      }\n    });\n\n    if (\n      metadata.type !== 'undefined' &&\n      metadata.type !== 'null' &&\n      mock.prototype &&\n      typeof mock.prototype === 'object'\n    ) {\n      mock.prototype.constructor = mock;\n    }\n\n    return mock;\n  }\n  /**\n   * @see README.md\n   * @param _metadata Metadata for the mock in the schema returned by the\n   * getMetadata method of this module.\n   */\n\n  generateFromMetadata(_metadata) {\n    const callbacks = [];\n    const refs = {};\n\n    const mock = this._generateMock(_metadata, callbacks, refs);\n\n    callbacks.forEach(setter => setter());\n    return mock;\n  }\n  /**\n   * @see README.md\n   * @param component The component for which to retrieve metadata.\n   */\n\n  getMetadata(component, _refs) {\n    const refs = _refs || new Map();\n    const ref = refs.get(component);\n\n    if (ref != null) {\n      return {\n        ref\n      };\n    }\n\n    const type = getType(component);\n\n    if (!type) {\n      return null;\n    }\n\n    const metadata = {\n      type\n    };\n\n    if (\n      type === 'constant' ||\n      type === 'collection' ||\n      type === 'undefined' ||\n      type === 'null'\n    ) {\n      metadata.value = component;\n      return metadata;\n    } else if (type === 'function') {\n      // @ts-expect-error this is a function so it has a name\n      metadata.name = component.name; // @ts-expect-error may be a mock\n\n      if (component._isMockFunction === true) {\n        // @ts-expect-error may be a mock\n        metadata.mockImpl = component.getMockImplementation();\n      }\n    }\n\n    metadata.refID = refs.size;\n    refs.set(component, metadata.refID);\n    let members = null; // Leave arrays alone\n\n    if (type !== 'array') {\n      this._getSlots(component).forEach(slot => {\n        if (\n          type === 'function' && // @ts-expect-error may be a mock\n          component._isMockFunction === true &&\n          slot.match(/^mock/)\n        ) {\n          return;\n        } // @ts-expect-error no index signature\n\n        const slotMetadata = this.getMetadata(component[slot], refs);\n\n        if (slotMetadata) {\n          if (!members) {\n            members = {};\n          }\n\n          members[slot] = slotMetadata;\n        }\n      });\n    }\n\n    if (members) {\n      metadata.members = members;\n    }\n\n    return metadata;\n  }\n\n  isMockFunction(fn) {\n    return !!fn && fn._isMockFunction === true;\n  }\n\n  fn(implementation) {\n    const length = implementation ? implementation.length : 0;\n\n    const fn = this._makeComponent({\n      length,\n      type: 'function'\n    });\n\n    if (implementation) {\n      fn.mockImplementation(implementation);\n    }\n\n    return fn;\n  }\n\n  spyOn(object, methodName, accessType) {\n    if (accessType) {\n      return this._spyOnProperty(object, methodName, accessType);\n    }\n\n    if (typeof object !== 'object' && typeof object !== 'function') {\n      throw new Error(\n        'Cannot spyOn on a primitive value; ' + this._typeOf(object) + ' given'\n      );\n    }\n\n    const original = object[methodName];\n\n    if (!this.isMockFunction(original)) {\n      if (typeof original !== 'function') {\n        throw new Error(\n          'Cannot spy the ' +\n            methodName +\n            ' property because it is not a function; ' +\n            this._typeOf(original) +\n            ' given instead'\n        );\n      }\n\n      const isMethodOwner = object.hasOwnProperty(methodName);\n      let descriptor = Object.getOwnPropertyDescriptor(object, methodName);\n      let proto = Object.getPrototypeOf(object);\n\n      while (!descriptor && proto !== null) {\n        descriptor = Object.getOwnPropertyDescriptor(proto, methodName);\n        proto = Object.getPrototypeOf(proto);\n      }\n\n      let mock;\n\n      if (descriptor && descriptor.get) {\n        const originalGet = descriptor.get;\n        mock = this._makeComponent(\n          {\n            type: 'function'\n          },\n          () => {\n            descriptor.get = originalGet;\n            Object.defineProperty(object, methodName, descriptor);\n          }\n        );\n\n        descriptor.get = () => mock;\n\n        Object.defineProperty(object, methodName, descriptor);\n      } else {\n        mock = this._makeComponent(\n          {\n            type: 'function'\n          },\n          () => {\n            if (isMethodOwner) {\n              object[methodName] = original;\n            } else {\n              delete object[methodName];\n            }\n          }\n        ); // @ts-expect-error overriding original method with a Mock\n\n        object[methodName] = mock;\n      }\n\n      mock.mockImplementation(function () {\n        return original.apply(this, arguments);\n      });\n    }\n\n    return object[methodName];\n  }\n\n  _spyOnProperty(obj, propertyName, accessType = 'get') {\n    if (typeof obj !== 'object' && typeof obj !== 'function') {\n      throw new Error(\n        'Cannot spyOn on a primitive value; ' + this._typeOf(obj) + ' given'\n      );\n    }\n\n    if (!obj) {\n      throw new Error(\n        'spyOn could not find an object to spy upon for ' + propertyName + ''\n      );\n    }\n\n    if (!propertyName) {\n      throw new Error('No property name supplied');\n    }\n\n    let descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);\n    let proto = Object.getPrototypeOf(obj);\n\n    while (!descriptor && proto !== null) {\n      descriptor = Object.getOwnPropertyDescriptor(proto, propertyName);\n      proto = Object.getPrototypeOf(proto);\n    }\n\n    if (!descriptor) {\n      throw new Error(propertyName + ' property does not exist');\n    }\n\n    if (!descriptor.configurable) {\n      throw new Error(propertyName + ' is not declared configurable');\n    }\n\n    if (!descriptor[accessType]) {\n      throw new Error(\n        'Property ' + propertyName + ' does not have access type ' + accessType\n      );\n    }\n\n    const original = descriptor[accessType];\n\n    if (!this.isMockFunction(original)) {\n      if (typeof original !== 'function') {\n        throw new Error(\n          'Cannot spy the ' +\n            propertyName +\n            ' property because it is not a function; ' +\n            this._typeOf(original) +\n            ' given instead'\n        );\n      } // @ts-expect-error: mock is assignable\n\n      descriptor[accessType] = this._makeComponent(\n        {\n          type: 'function'\n        },\n        () => {\n          // @ts-expect-error: mock is assignable\n          descriptor[accessType] = original;\n          Object.defineProperty(obj, propertyName, descriptor);\n        }\n      );\n      descriptor[accessType].mockImplementation(function () {\n        // @ts-expect-error\n        return original.apply(this, arguments);\n      });\n    }\n\n    Object.defineProperty(obj, propertyName, descriptor);\n    return descriptor[accessType];\n  }\n\n  clearAllMocks() {\n    this._mockState = new WeakMap();\n  }\n\n  resetAllMocks() {\n    this._mockConfigRegistry = new WeakMap();\n    this._mockState = new WeakMap();\n  }\n\n  restoreAllMocks() {\n    this._spyState.forEach(restore => restore());\n\n    this._spyState = new Set();\n  }\n\n  _typeOf(value) {\n    return value == null ? '' + value : typeof value;\n  }\n}\n\nconst JestMock = new ModuleMockerClass(global);\nmodule.exports = JestMock;\n"]},"metadata":{},"sourceType":"script"}