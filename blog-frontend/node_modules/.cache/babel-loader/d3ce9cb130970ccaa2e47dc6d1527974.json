{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { takeLatest } from 'redux-saga/effects';\nimport * as authAPI from '../lib/api/auth';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nconst TEMP_SET_USER = 'user/TEMP_SET_USER'; // 새로고침 이후 임시 로그인 처리\n// 회원 정보 확인\n\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes('user/CHECK');\nexport const tempSetUser = createAction(TEMP_SET_USER, user => user);\nexport const check = createAction(CHECK);\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\n\nfunction checkFailureSaga() {\n  try {\n    localStorage.removeItem('user'); // localStorage에서 user를 제거\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\n\nexport function* userSaga() {\n  yield takeLatest(CHECK, checkSaga);\n}\nconst initialState = {\n  user: null,\n  checkError: null\n};\nexport default handleActions({\n  [TEMP_SET_USER]: (state, {\n    payload: user\n  }) => ({ ...state,\n    user\n  }),\n  [CHECK_SUCCESS]: (state, {\n    payload: user\n  }) => ({ ...state,\n    user,\n    checkError: null\n  }),\n  [CHECK_FAILURE]: (state, {\n    payload: error\n  }) => ({ ...state,\n    user: null,\n    checkError: error\n  })\n}, initialState);","map":{"version":3,"sources":["/Users/jeonghyeon/Desktop/kjh/dev/blog-react/blog-frontend/src/modules/user.js"],"names":["createAction","handleActions","takeLatest","authAPI","createRequestSaga","createRequestActionTypes","TEMP_SET_USER","CHECK","CHECK_SUCCESS","CHECK_FAILURE","tempSetUser","user","check","checkSaga","checkFailureSaga","localStorage","removeItem","e","console","log","userSaga","initialState","checkError","state","payload","error"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,OAAO,KAAKC,OAAZ,MAAyB,iBAAzB;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAIA,MAAMC,aAAa,GAAG,oBAAtB,C,CAA4C;AAC5C;;AACA,MAAM,CAACC,KAAD,EAAQC,aAAR,EAAuBC,aAAvB,IAAwCJ,wBAAwB,CACpE,YADoE,CAAtE;AAIA,OAAO,MAAMK,WAAW,GAAGV,YAAY,CAACM,aAAD,EAAiBK,IAAD,IAAUA,IAA1B,CAAhC;AACP,OAAO,MAAMC,KAAK,GAAGZ,YAAY,CAACO,KAAD,CAA1B;AAEP,MAAMM,SAAS,GAAGT,iBAAiB,CAACG,KAAD,EAAQJ,OAAO,CAACS,KAAhB,CAAnC;;AAEA,SAASE,gBAAT,GAA4B;AAC1B,MAAI;AACFC,IAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB,EADE,CAC+B;AAClC,GAFD,CAEE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACD;AACF;;AACD,OAAO,UAAUC,QAAV,GAAqB;AAC1B,QAAMlB,UAAU,CAACK,KAAD,EAAQM,SAAR,CAAhB;AACD;AAED,MAAMQ,YAAY,GAAG;AACnBV,EAAAA,IAAI,EAAE,IADa;AAEnBW,EAAAA,UAAU,EAAE;AAFO,CAArB;AAKA,eAAerB,aAAa,CAC1B;AACE,GAACK,aAAD,GAAiB,CAACiB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEb;AAAX,GAAR,MAA+B,EAC9C,GAAGY,KAD2C;AAE9CZ,IAAAA;AAF8C,GAA/B,CADnB;AAKE,GAACH,aAAD,GAAiB,CAACe,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEb;AAAX,GAAR,MAA+B,EAC9C,GAAGY,KAD2C;AAE9CZ,IAAAA,IAF8C;AAG9CW,IAAAA,UAAU,EAAE;AAHkC,GAA/B,CALnB;AAUE,GAACb,aAAD,GAAiB,CAACc,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEC;AAAX,GAAR,MAAgC,EAC/C,GAAGF,KAD4C;AAE/CZ,IAAAA,IAAI,EAAE,IAFyC;AAG/CW,IAAAA,UAAU,EAAEG;AAHmC,GAAhC;AAVnB,CAD0B,EAiB1BJ,YAjB0B,CAA5B","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport { takeLatest } from 'redux-saga/effects';\nimport * as authAPI from '../lib/api/auth';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\n\nconst TEMP_SET_USER = 'user/TEMP_SET_USER'; // 새로고침 이후 임시 로그인 처리\n// 회원 정보 확인\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\n  'user/CHECK',\n);\n\nexport const tempSetUser = createAction(TEMP_SET_USER, (user) => user);\nexport const check = createAction(CHECK);\n\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\n\nfunction checkFailureSaga() {\n  try {\n    localStorage.removeItem('user'); // localStorage에서 user를 제거\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\nexport function* userSaga() {\n  yield takeLatest(CHECK, checkSaga);\n}\n\nconst initialState = {\n  user: null,\n  checkError: null,\n};\n\nexport default handleActions(\n  {\n    [TEMP_SET_USER]: (state, { payload: user }) => ({\n      ...state,\n      user,\n    }),\n    [CHECK_SUCCESS]: (state, { payload: user }) => ({\n      ...state,\n      user,\n      checkError: null,\n    }),\n    [CHECK_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      user: null,\n      checkError: error,\n    }),\n  },\n  initialState,\n);\n"]},"metadata":{},"sourceType":"module"}