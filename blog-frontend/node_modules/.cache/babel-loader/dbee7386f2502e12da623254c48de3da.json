{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jeonghyeon/Desktop/kjh/dev/blog-react/blog-frontend/src/containers/post/PostViewerContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { readPost, unloadPost } from '../../modules/post';\nimport PostViewer from '../../components/post/PostViewer';\nimport PostActionButtons from '../../components/post/PostActionButtons'; // import { setOriginalPost } from '../../modules/write';\n\nconst PostViewerContainer = ({\n  match,\n  history\n}) => {\n  _s();\n\n  // 처음 마운트될 때 포스트 읽기 API 요청\n  const {\n    postId\n  } = match.params;\n  const dispatch = useDispatch();\n  const {\n    post,\n    error,\n    loading\n  } = useSelector(({\n    post,\n    loading,\n    user\n  }) => ({\n    post: post.post,\n    error: post.error,\n    loading: loading['post/READ_POST'] // user: user.user,\n\n  }));\n  useEffect(() => {\n    dispatch(readPost(postId)); // 언마운트될 때 리덕스에서 포스트 데이터 없애기\n\n    return () => {\n      dispatch(unloadPost());\n    };\n  }, [dispatch, postId]); // const onEdit = () => {\n  //   dispatch(setOriginalPost(post));\n  //   history.push('/write');\n  // };\n  // const ownPost = (user && user._id) === (post && post.user._id);\n\n  return /*#__PURE__*/_jsxDEV(PostViewer, {\n    post: post,\n    loading: loading,\n    error: error // actionButtons={ownPost && <PostActionButtons onEdit={onEdit} />}\n    ,\n    actionButtons: /*#__PURE__*/_jsxDEV(PostActionButtons, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 22\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostViewerContainer, \"vb4c2O5IgOlif/fkeMzCaw43qPI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = PostViewerContainer;\nexport default _c2 = withRouter(PostViewerContainer);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PostViewerContainer\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/jeonghyeon/Desktop/kjh/dev/blog-react/blog-frontend/src/containers/post/PostViewerContainer.js"],"names":["React","useEffect","useDispatch","useSelector","withRouter","readPost","unloadPost","PostViewer","PostActionButtons","PostViewerContainer","match","history","postId","params","dispatch","post","error","loading","user"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,oBAArC;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,OAAOC,iBAAP,MAA8B,yCAA9B,C,CACA;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAwB;AAAA;;AAClD;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAaF,KAAK,CAACG,MAAzB;AACA,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAM;AAAEa,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2Bd,WAAW,CAAC,CAAC;AAAEY,IAAAA,IAAF;AAAQE,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,GAAD,MAA8B;AACzEH,IAAAA,IAAI,EAAEA,IAAI,CAACA,IAD8D;AAEzEC,IAAAA,KAAK,EAAED,IAAI,CAACC,KAF6D;AAGzEC,IAAAA,OAAO,EAAEA,OAAO,CAAC,gBAAD,CAHyD,CAIzE;;AAJyE,GAA9B,CAAD,CAA5C;AAOAhB,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,QAAQ,CAACT,QAAQ,CAACO,MAAD,CAAT,CAAR,CADc,CAEd;;AACA,WAAO,MAAM;AACXE,MAAAA,QAAQ,CAACR,UAAU,EAAX,CAAR;AACD,KAFD;AAGD,GANQ,EAMN,CAACQ,QAAD,EAAWF,MAAX,CANM,CAAT,CAXkD,CAmBlD;AACA;AACA;AACA;AAEA;;AAEA,sBACE,QAAC,UAAD;AACE,IAAA,IAAI,EAAEG,IADR;AAEE,IAAA,OAAO,EAAEE,OAFX;AAGE,IAAA,KAAK,EAAED,KAHT,CAIE;AAJF;AAKE,IAAA,aAAa,eAAE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AALjB;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAnCD;;GAAMP,mB;UAGaP,W,EACgBC,W;;;KAJ7BM,mB;AAqCN,qBAAeL,UAAU,CAACK,mBAAD,CAAzB","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { readPost, unloadPost } from '../../modules/post';\nimport PostViewer from '../../components/post/PostViewer';\nimport PostActionButtons from '../../components/post/PostActionButtons';\n// import { setOriginalPost } from '../../modules/write';\n\nconst PostViewerContainer = ({ match, history }) => {\n  // 처음 마운트될 때 포스트 읽기 API 요청\n  const { postId } = match.params;\n  const dispatch = useDispatch();\n  const { post, error, loading } = useSelector(({ post, loading, user }) => ({\n    post: post.post,\n    error: post.error,\n    loading: loading['post/READ_POST'],\n    // user: user.user,\n  }));\n\n  useEffect(() => {\n    dispatch(readPost(postId));\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\n    return () => {\n      dispatch(unloadPost());\n    };\n  }, [dispatch, postId]);\n\n  // const onEdit = () => {\n  //   dispatch(setOriginalPost(post));\n  //   history.push('/write');\n  // };\n\n  // const ownPost = (user && user._id) === (post && post.user._id);\n\n  return (\n    <PostViewer\n      post={post}\n      loading={loading}\n      error={error}\n      // actionButtons={ownPost && <PostActionButtons onEdit={onEdit} />}\n      actionButtons={<PostActionButtons />}\n    />\n  );\n};\n\nexport default withRouter(PostViewerContainer);\n"]},"metadata":{},"sourceType":"module"}